// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry/telemetry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_telemetry_2ftelemetry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_telemetry_2ftelemetry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_telemetry_2ftelemetry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_telemetry_2ftelemetry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[56]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_telemetry_2ftelemetry_2eproto;
namespace mavsdk {
namespace rpc {
namespace telemetry {
class ActuatorControlTarget;
class ActuatorControlTargetDefaultTypeInternal;
extern ActuatorControlTargetDefaultTypeInternal _ActuatorControlTarget_default_instance_;
class ActuatorControlTargetResponse;
class ActuatorControlTargetResponseDefaultTypeInternal;
extern ActuatorControlTargetResponseDefaultTypeInternal _ActuatorControlTargetResponse_default_instance_;
class ActuatorOutputStatus;
class ActuatorOutputStatusDefaultTypeInternal;
extern ActuatorOutputStatusDefaultTypeInternal _ActuatorOutputStatus_default_instance_;
class ActuatorOutputStatusResponse;
class ActuatorOutputStatusResponseDefaultTypeInternal;
extern ActuatorOutputStatusResponseDefaultTypeInternal _ActuatorOutputStatusResponse_default_instance_;
class AngularVelocityBody;
class AngularVelocityBodyDefaultTypeInternal;
extern AngularVelocityBodyDefaultTypeInternal _AngularVelocityBody_default_instance_;
class ArmedResponse;
class ArmedResponseDefaultTypeInternal;
extern ArmedResponseDefaultTypeInternal _ArmedResponse_default_instance_;
class AttitudeAngularVelocityBodyResponse;
class AttitudeAngularVelocityBodyResponseDefaultTypeInternal;
extern AttitudeAngularVelocityBodyResponseDefaultTypeInternal _AttitudeAngularVelocityBodyResponse_default_instance_;
class AttitudeEulerResponse;
class AttitudeEulerResponseDefaultTypeInternal;
extern AttitudeEulerResponseDefaultTypeInternal _AttitudeEulerResponse_default_instance_;
class AttitudeQuaternionResponse;
class AttitudeQuaternionResponseDefaultTypeInternal;
extern AttitudeQuaternionResponseDefaultTypeInternal _AttitudeQuaternionResponse_default_instance_;
class Battery;
class BatteryDefaultTypeInternal;
extern BatteryDefaultTypeInternal _Battery_default_instance_;
class BatteryResponse;
class BatteryResponseDefaultTypeInternal;
extern BatteryResponseDefaultTypeInternal _BatteryResponse_default_instance_;
class CameraAttitudeEulerResponse;
class CameraAttitudeEulerResponseDefaultTypeInternal;
extern CameraAttitudeEulerResponseDefaultTypeInternal _CameraAttitudeEulerResponse_default_instance_;
class CameraAttitudeQuaternionResponse;
class CameraAttitudeQuaternionResponseDefaultTypeInternal;
extern CameraAttitudeQuaternionResponseDefaultTypeInternal _CameraAttitudeQuaternionResponse_default_instance_;
class Covariance;
class CovarianceDefaultTypeInternal;
extern CovarianceDefaultTypeInternal _Covariance_default_instance_;
class EulerAngle;
class EulerAngleDefaultTypeInternal;
extern EulerAngleDefaultTypeInternal _EulerAngle_default_instance_;
class FlightModeResponse;
class FlightModeResponseDefaultTypeInternal;
extern FlightModeResponseDefaultTypeInternal _FlightModeResponse_default_instance_;
class GpsInfo;
class GpsInfoDefaultTypeInternal;
extern GpsInfoDefaultTypeInternal _GpsInfo_default_instance_;
class GpsInfoResponse;
class GpsInfoResponseDefaultTypeInternal;
extern GpsInfoResponseDefaultTypeInternal _GpsInfoResponse_default_instance_;
class GroundSpeedNedResponse;
class GroundSpeedNedResponseDefaultTypeInternal;
extern GroundSpeedNedResponseDefaultTypeInternal _GroundSpeedNedResponse_default_instance_;
class Health;
class HealthDefaultTypeInternal;
extern HealthDefaultTypeInternal _Health_default_instance_;
class HealthResponse;
class HealthResponseDefaultTypeInternal;
extern HealthResponseDefaultTypeInternal _HealthResponse_default_instance_;
class HomeResponse;
class HomeResponseDefaultTypeInternal;
extern HomeResponseDefaultTypeInternal _HomeResponse_default_instance_;
class InAirResponse;
class InAirResponseDefaultTypeInternal;
extern InAirResponseDefaultTypeInternal _InAirResponse_default_instance_;
class LandedStateResponse;
class LandedStateResponseDefaultTypeInternal;
extern LandedStateResponseDefaultTypeInternal _LandedStateResponse_default_instance_;
class Odometry;
class OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
class OdometryResponse;
class OdometryResponseDefaultTypeInternal;
extern OdometryResponseDefaultTypeInternal _OdometryResponse_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class PositionBody;
class PositionBodyDefaultTypeInternal;
extern PositionBodyDefaultTypeInternal _PositionBody_default_instance_;
class PositionResponse;
class PositionResponseDefaultTypeInternal;
extern PositionResponseDefaultTypeInternal _PositionResponse_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class RcStatus;
class RcStatusDefaultTypeInternal;
extern RcStatusDefaultTypeInternal _RcStatus_default_instance_;
class RcStatusResponse;
class RcStatusResponseDefaultTypeInternal;
extern RcStatusResponseDefaultTypeInternal _RcStatusResponse_default_instance_;
class SpeedBody;
class SpeedBodyDefaultTypeInternal;
extern SpeedBodyDefaultTypeInternal _SpeedBody_default_instance_;
class SpeedNed;
class SpeedNedDefaultTypeInternal;
extern SpeedNedDefaultTypeInternal _SpeedNed_default_instance_;
class StatusText;
class StatusTextDefaultTypeInternal;
extern StatusTextDefaultTypeInternal _StatusText_default_instance_;
class StatusTextResponse;
class StatusTextResponseDefaultTypeInternal;
extern StatusTextResponseDefaultTypeInternal _StatusTextResponse_default_instance_;
class SubscribeActuatorControlTargetRequest;
class SubscribeActuatorControlTargetRequestDefaultTypeInternal;
extern SubscribeActuatorControlTargetRequestDefaultTypeInternal _SubscribeActuatorControlTargetRequest_default_instance_;
class SubscribeActuatorOutputStatusRequest;
class SubscribeActuatorOutputStatusRequestDefaultTypeInternal;
extern SubscribeActuatorOutputStatusRequestDefaultTypeInternal _SubscribeActuatorOutputStatusRequest_default_instance_;
class SubscribeArmedRequest;
class SubscribeArmedRequestDefaultTypeInternal;
extern SubscribeArmedRequestDefaultTypeInternal _SubscribeArmedRequest_default_instance_;
class SubscribeAttitudeAngularVelocityBodyRequest;
class SubscribeAttitudeAngularVelocityBodyRequestDefaultTypeInternal;
extern SubscribeAttitudeAngularVelocityBodyRequestDefaultTypeInternal _SubscribeAttitudeAngularVelocityBodyRequest_default_instance_;
class SubscribeAttitudeEulerRequest;
class SubscribeAttitudeEulerRequestDefaultTypeInternal;
extern SubscribeAttitudeEulerRequestDefaultTypeInternal _SubscribeAttitudeEulerRequest_default_instance_;
class SubscribeAttitudeQuaternionRequest;
class SubscribeAttitudeQuaternionRequestDefaultTypeInternal;
extern SubscribeAttitudeQuaternionRequestDefaultTypeInternal _SubscribeAttitudeQuaternionRequest_default_instance_;
class SubscribeBatteryRequest;
class SubscribeBatteryRequestDefaultTypeInternal;
extern SubscribeBatteryRequestDefaultTypeInternal _SubscribeBatteryRequest_default_instance_;
class SubscribeCameraAttitudeEulerRequest;
class SubscribeCameraAttitudeEulerRequestDefaultTypeInternal;
extern SubscribeCameraAttitudeEulerRequestDefaultTypeInternal _SubscribeCameraAttitudeEulerRequest_default_instance_;
class SubscribeCameraAttitudeQuaternionRequest;
class SubscribeCameraAttitudeQuaternionRequestDefaultTypeInternal;
extern SubscribeCameraAttitudeQuaternionRequestDefaultTypeInternal _SubscribeCameraAttitudeQuaternionRequest_default_instance_;
class SubscribeFlightModeRequest;
class SubscribeFlightModeRequestDefaultTypeInternal;
extern SubscribeFlightModeRequestDefaultTypeInternal _SubscribeFlightModeRequest_default_instance_;
class SubscribeGpsInfoRequest;
class SubscribeGpsInfoRequestDefaultTypeInternal;
extern SubscribeGpsInfoRequestDefaultTypeInternal _SubscribeGpsInfoRequest_default_instance_;
class SubscribeGroundSpeedNedRequest;
class SubscribeGroundSpeedNedRequestDefaultTypeInternal;
extern SubscribeGroundSpeedNedRequestDefaultTypeInternal _SubscribeGroundSpeedNedRequest_default_instance_;
class SubscribeHealthRequest;
class SubscribeHealthRequestDefaultTypeInternal;
extern SubscribeHealthRequestDefaultTypeInternal _SubscribeHealthRequest_default_instance_;
class SubscribeHomeRequest;
class SubscribeHomeRequestDefaultTypeInternal;
extern SubscribeHomeRequestDefaultTypeInternal _SubscribeHomeRequest_default_instance_;
class SubscribeInAirRequest;
class SubscribeInAirRequestDefaultTypeInternal;
extern SubscribeInAirRequestDefaultTypeInternal _SubscribeInAirRequest_default_instance_;
class SubscribeLandedStateRequest;
class SubscribeLandedStateRequestDefaultTypeInternal;
extern SubscribeLandedStateRequestDefaultTypeInternal _SubscribeLandedStateRequest_default_instance_;
class SubscribeOdometryRequest;
class SubscribeOdometryRequestDefaultTypeInternal;
extern SubscribeOdometryRequestDefaultTypeInternal _SubscribeOdometryRequest_default_instance_;
class SubscribePositionRequest;
class SubscribePositionRequestDefaultTypeInternal;
extern SubscribePositionRequestDefaultTypeInternal _SubscribePositionRequest_default_instance_;
class SubscribeRcStatusRequest;
class SubscribeRcStatusRequestDefaultTypeInternal;
extern SubscribeRcStatusRequestDefaultTypeInternal _SubscribeRcStatusRequest_default_instance_;
class SubscribeStatusTextRequest;
class SubscribeStatusTextRequestDefaultTypeInternal;
extern SubscribeStatusTextRequestDefaultTypeInternal _SubscribeStatusTextRequest_default_instance_;
}  // namespace telemetry
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::telemetry::ActuatorControlTarget* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::ActuatorControlTarget>(Arena*);
template<> ::mavsdk::rpc::telemetry::ActuatorControlTargetResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::ActuatorControlTargetResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::ActuatorOutputStatus* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::ActuatorOutputStatus>(Arena*);
template<> ::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::ActuatorOutputStatusResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::AngularVelocityBody* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::AngularVelocityBody>(Arena*);
template<> ::mavsdk::rpc::telemetry::ArmedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::ArmedResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::AttitudeAngularVelocityBodyResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::AttitudeEulerResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::AttitudeEulerResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::AttitudeQuaternionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::AttitudeQuaternionResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::Battery* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::Battery>(Arena*);
template<> ::mavsdk::rpc::telemetry::BatteryResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::BatteryResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::CameraAttitudeEulerResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::CameraAttitudeQuaternionResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::Covariance* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::Covariance>(Arena*);
template<> ::mavsdk::rpc::telemetry::EulerAngle* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::EulerAngle>(Arena*);
template<> ::mavsdk::rpc::telemetry::FlightModeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::FlightModeResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::GpsInfo* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::GpsInfo>(Arena*);
template<> ::mavsdk::rpc::telemetry::GpsInfoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::GpsInfoResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::GroundSpeedNedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::GroundSpeedNedResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::Health* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::Health>(Arena*);
template<> ::mavsdk::rpc::telemetry::HealthResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::HealthResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::HomeResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::HomeResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::InAirResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::InAirResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::LandedStateResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::LandedStateResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::Odometry* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::Odometry>(Arena*);
template<> ::mavsdk::rpc::telemetry::OdometryResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::OdometryResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::Position* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::Position>(Arena*);
template<> ::mavsdk::rpc::telemetry::PositionBody* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::PositionBody>(Arena*);
template<> ::mavsdk::rpc::telemetry::PositionResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::PositionResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::Quaternion* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::Quaternion>(Arena*);
template<> ::mavsdk::rpc::telemetry::RcStatus* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::RcStatus>(Arena*);
template<> ::mavsdk::rpc::telemetry::RcStatusResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::RcStatusResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SpeedBody* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SpeedBody>(Arena*);
template<> ::mavsdk::rpc::telemetry::SpeedNed* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SpeedNed>(Arena*);
template<> ::mavsdk::rpc::telemetry::StatusText* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::StatusText>(Arena*);
template<> ::mavsdk::rpc::telemetry::StatusTextResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::StatusTextResponse>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeActuatorControlTargetRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeActuatorOutputStatusRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeArmedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeArmedRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeAttitudeAngularVelocityBodyRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeAttitudeEulerRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeAttitudeQuaternionRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeBatteryRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeBatteryRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeCameraAttitudeEulerRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeCameraAttitudeQuaternionRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeFlightModeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeFlightModeRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeGpsInfoRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeGroundSpeedNedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeGroundSpeedNedRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeHealthRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeHealthRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeHomeRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeHomeRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeInAirRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeInAirRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeLandedStateRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeLandedStateRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeOdometryRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeOdometryRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribePositionRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribePositionRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeRcStatusRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeRcStatusRequest>(Arena*);
template<> ::mavsdk::rpc::telemetry::SubscribeStatusTextRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::telemetry::SubscribeStatusTextRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace telemetry {

enum StatusText_StatusType : int {
  StatusText_StatusType_INFO = 0,
  StatusText_StatusType_WARNING = 1,
  StatusText_StatusType_CRITICAL = 2,
  StatusText_StatusType_StatusText_StatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StatusText_StatusType_StatusText_StatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StatusText_StatusType_IsValid(int value);
constexpr StatusText_StatusType StatusText_StatusType_StatusType_MIN = StatusText_StatusType_INFO;
constexpr StatusText_StatusType StatusText_StatusType_StatusType_MAX = StatusText_StatusType_CRITICAL;
constexpr int StatusText_StatusType_StatusType_ARRAYSIZE = StatusText_StatusType_StatusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StatusText_StatusType_descriptor();
template<typename T>
inline const std::string& StatusText_StatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StatusText_StatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StatusText_StatusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StatusText_StatusType_descriptor(), enum_t_value);
}
inline bool StatusText_StatusType_Parse(
    const std::string& name, StatusText_StatusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StatusText_StatusType>(
    StatusText_StatusType_descriptor(), name, value);
}
enum Odometry_MavFrame : int {
  Odometry_MavFrame_UNDEF = 0,
  Odometry_MavFrame_BODY_NED = 8,
  Odometry_MavFrame_VISION_NED = 16,
  Odometry_MavFrame_ESTIM_NED = 18,
  Odometry_MavFrame_Odometry_MavFrame_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Odometry_MavFrame_Odometry_MavFrame_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Odometry_MavFrame_IsValid(int value);
constexpr Odometry_MavFrame Odometry_MavFrame_MavFrame_MIN = Odometry_MavFrame_UNDEF;
constexpr Odometry_MavFrame Odometry_MavFrame_MavFrame_MAX = Odometry_MavFrame_ESTIM_NED;
constexpr int Odometry_MavFrame_MavFrame_ARRAYSIZE = Odometry_MavFrame_MavFrame_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Odometry_MavFrame_descriptor();
template<typename T>
inline const std::string& Odometry_MavFrame_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Odometry_MavFrame>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Odometry_MavFrame_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Odometry_MavFrame_descriptor(), enum_t_value);
}
inline bool Odometry_MavFrame_Parse(
    const std::string& name, Odometry_MavFrame* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Odometry_MavFrame>(
    Odometry_MavFrame_descriptor(), name, value);
}
enum FixType : int {
  NO_GPS = 0,
  NO_FIX = 1,
  FIX_2D = 2,
  FIX_3D = 3,
  FIX_DGPS = 4,
  RTK_FLOAT = 5,
  RTK_FIXED = 6,
  FixType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FixType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FixType_IsValid(int value);
constexpr FixType FixType_MIN = NO_GPS;
constexpr FixType FixType_MAX = RTK_FIXED;
constexpr int FixType_ARRAYSIZE = FixType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FixType_descriptor();
template<typename T>
inline const std::string& FixType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FixType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FixType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FixType_descriptor(), enum_t_value);
}
inline bool FixType_Parse(
    const std::string& name, FixType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FixType>(
    FixType_descriptor(), name, value);
}
enum FlightMode : int {
  UNKNOWN = 0,
  READY = 1,
  TAKEOFF = 2,
  HOLD = 3,
  MISSION = 4,
  RETURN_TO_LAUNCH = 5,
  LAND = 6,
  OFFBOARD = 7,
  FOLLOW_ME = 8,
  FlightMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FlightMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FlightMode_IsValid(int value);
constexpr FlightMode FlightMode_MIN = UNKNOWN;
constexpr FlightMode FlightMode_MAX = FOLLOW_ME;
constexpr int FlightMode_ARRAYSIZE = FlightMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FlightMode_descriptor();
template<typename T>
inline const std::string& FlightMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FlightMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FlightMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FlightMode_descriptor(), enum_t_value);
}
inline bool FlightMode_Parse(
    const std::string& name, FlightMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FlightMode>(
    FlightMode_descriptor(), name, value);
}
enum LandedState : int {
  LANDED_STATE_UNKNOWN = 0,
  LANDED_STATE_ON_GROUND = 1,
  LANDED_STATE_IN_AIR = 2,
  LANDED_STATE_TAKING_OFF = 3,
  LANDED_STATE_LANDING = 4,
  LandedState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LandedState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LandedState_IsValid(int value);
constexpr LandedState LandedState_MIN = LANDED_STATE_UNKNOWN;
constexpr LandedState LandedState_MAX = LANDED_STATE_LANDING;
constexpr int LandedState_ARRAYSIZE = LandedState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LandedState_descriptor();
template<typename T>
inline const std::string& LandedState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LandedState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LandedState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LandedState_descriptor(), enum_t_value);
}
inline bool LandedState_Parse(
    const std::string& name, LandedState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LandedState>(
    LandedState_descriptor(), name, value);
}
// ===================================================================

class SubscribePositionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribePositionRequest) */ {
 public:
  SubscribePositionRequest();
  virtual ~SubscribePositionRequest();

  SubscribePositionRequest(const SubscribePositionRequest& from);
  SubscribePositionRequest(SubscribePositionRequest&& from) noexcept
    : SubscribePositionRequest() {
    *this = ::std::move(from);
  }

  inline SubscribePositionRequest& operator=(const SubscribePositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribePositionRequest& operator=(SubscribePositionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribePositionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribePositionRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribePositionRequest*>(
               &_SubscribePositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubscribePositionRequest& a, SubscribePositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribePositionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribePositionRequest* New() const final {
    return CreateMaybeMessage<SubscribePositionRequest>(nullptr);
  }

  SubscribePositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribePositionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribePositionRequest& from);
  void MergeFrom(const SubscribePositionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribePositionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribePositionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribePositionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class PositionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.PositionResponse) */ {
 public:
  PositionResponse();
  virtual ~PositionResponse();

  PositionResponse(const PositionResponse& from);
  PositionResponse(PositionResponse&& from) noexcept
    : PositionResponse() {
    *this = ::std::move(from);
  }

  inline PositionResponse& operator=(const PositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionResponse& operator=(PositionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionResponse* internal_default_instance() {
    return reinterpret_cast<const PositionResponse*>(
               &_PositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PositionResponse& a, PositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionResponse* New() const final {
    return CreateMaybeMessage<PositionResponse>(nullptr);
  }

  PositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionResponse& from);
  void MergeFrom(const PositionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.PositionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::mavsdk::rpc::telemetry::Position& position() const;
  ::mavsdk::rpc::telemetry::Position* release_position();
  ::mavsdk::rpc::telemetry::Position* mutable_position();
  void set_allocated_position(::mavsdk::rpc::telemetry::Position* position);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.PositionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::Position* position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeHomeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeHomeRequest) */ {
 public:
  SubscribeHomeRequest();
  virtual ~SubscribeHomeRequest();

  SubscribeHomeRequest(const SubscribeHomeRequest& from);
  SubscribeHomeRequest(SubscribeHomeRequest&& from) noexcept
    : SubscribeHomeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeHomeRequest& operator=(const SubscribeHomeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeHomeRequest& operator=(SubscribeHomeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeHomeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeHomeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeHomeRequest*>(
               &_SubscribeHomeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SubscribeHomeRequest& a, SubscribeHomeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeHomeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeHomeRequest* New() const final {
    return CreateMaybeMessage<SubscribeHomeRequest>(nullptr);
  }

  SubscribeHomeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeHomeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeHomeRequest& from);
  void MergeFrom(const SubscribeHomeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeHomeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeHomeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeHomeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class HomeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.HomeResponse) */ {
 public:
  HomeResponse();
  virtual ~HomeResponse();

  HomeResponse(const HomeResponse& from);
  HomeResponse(HomeResponse&& from) noexcept
    : HomeResponse() {
    *this = ::std::move(from);
  }

  inline HomeResponse& operator=(const HomeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HomeResponse& operator=(HomeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HomeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HomeResponse* internal_default_instance() {
    return reinterpret_cast<const HomeResponse*>(
               &_HomeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HomeResponse& a, HomeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HomeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HomeResponse* New() const final {
    return CreateMaybeMessage<HomeResponse>(nullptr);
  }

  HomeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HomeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HomeResponse& from);
  void MergeFrom(const HomeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HomeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.HomeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomeFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Position home = 1;
  bool has_home() const;
  private:
  bool _internal_has_home() const;
  public:
  void clear_home();
  const ::mavsdk::rpc::telemetry::Position& home() const;
  ::mavsdk::rpc::telemetry::Position* release_home();
  ::mavsdk::rpc::telemetry::Position* mutable_home();
  void set_allocated_home(::mavsdk::rpc::telemetry::Position* home);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.HomeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::Position* home_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeInAirRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeInAirRequest) */ {
 public:
  SubscribeInAirRequest();
  virtual ~SubscribeInAirRequest();

  SubscribeInAirRequest(const SubscribeInAirRequest& from);
  SubscribeInAirRequest(SubscribeInAirRequest&& from) noexcept
    : SubscribeInAirRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeInAirRequest& operator=(const SubscribeInAirRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeInAirRequest& operator=(SubscribeInAirRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeInAirRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeInAirRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeInAirRequest*>(
               &_SubscribeInAirRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubscribeInAirRequest& a, SubscribeInAirRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeInAirRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeInAirRequest* New() const final {
    return CreateMaybeMessage<SubscribeInAirRequest>(nullptr);
  }

  SubscribeInAirRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeInAirRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeInAirRequest& from);
  void MergeFrom(const SubscribeInAirRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeInAirRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeInAirRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeInAirRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class InAirResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.InAirResponse) */ {
 public:
  InAirResponse();
  virtual ~InAirResponse();

  InAirResponse(const InAirResponse& from);
  InAirResponse(InAirResponse&& from) noexcept
    : InAirResponse() {
    *this = ::std::move(from);
  }

  inline InAirResponse& operator=(const InAirResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InAirResponse& operator=(InAirResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InAirResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InAirResponse* internal_default_instance() {
    return reinterpret_cast<const InAirResponse*>(
               &_InAirResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InAirResponse& a, InAirResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InAirResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InAirResponse* New() const final {
    return CreateMaybeMessage<InAirResponse>(nullptr);
  }

  InAirResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InAirResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InAirResponse& from);
  void MergeFrom(const InAirResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InAirResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.InAirResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsInAirFieldNumber = 1,
  };
  // bool is_in_air = 1;
  void clear_is_in_air();
  bool is_in_air() const;
  void set_is_in_air(bool value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.InAirResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_in_air_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeLandedStateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeLandedStateRequest) */ {
 public:
  SubscribeLandedStateRequest();
  virtual ~SubscribeLandedStateRequest();

  SubscribeLandedStateRequest(const SubscribeLandedStateRequest& from);
  SubscribeLandedStateRequest(SubscribeLandedStateRequest&& from) noexcept
    : SubscribeLandedStateRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeLandedStateRequest& operator=(const SubscribeLandedStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeLandedStateRequest& operator=(SubscribeLandedStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeLandedStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeLandedStateRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeLandedStateRequest*>(
               &_SubscribeLandedStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SubscribeLandedStateRequest& a, SubscribeLandedStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeLandedStateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeLandedStateRequest* New() const final {
    return CreateMaybeMessage<SubscribeLandedStateRequest>(nullptr);
  }

  SubscribeLandedStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeLandedStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeLandedStateRequest& from);
  void MergeFrom(const SubscribeLandedStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeLandedStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeLandedStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeLandedStateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class LandedStateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.LandedStateResponse) */ {
 public:
  LandedStateResponse();
  virtual ~LandedStateResponse();

  LandedStateResponse(const LandedStateResponse& from);
  LandedStateResponse(LandedStateResponse&& from) noexcept
    : LandedStateResponse() {
    *this = ::std::move(from);
  }

  inline LandedStateResponse& operator=(const LandedStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LandedStateResponse& operator=(LandedStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LandedStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LandedStateResponse* internal_default_instance() {
    return reinterpret_cast<const LandedStateResponse*>(
               &_LandedStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LandedStateResponse& a, LandedStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LandedStateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LandedStateResponse* New() const final {
    return CreateMaybeMessage<LandedStateResponse>(nullptr);
  }

  LandedStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LandedStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LandedStateResponse& from);
  void MergeFrom(const LandedStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LandedStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.LandedStateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandedStateFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.LandedState landed_state = 1;
  void clear_landed_state();
  ::mavsdk::rpc::telemetry::LandedState landed_state() const;
  void set_landed_state(::mavsdk::rpc::telemetry::LandedState value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.LandedStateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int landed_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeArmedRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeArmedRequest) */ {
 public:
  SubscribeArmedRequest();
  virtual ~SubscribeArmedRequest();

  SubscribeArmedRequest(const SubscribeArmedRequest& from);
  SubscribeArmedRequest(SubscribeArmedRequest&& from) noexcept
    : SubscribeArmedRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeArmedRequest& operator=(const SubscribeArmedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeArmedRequest& operator=(SubscribeArmedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeArmedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeArmedRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeArmedRequest*>(
               &_SubscribeArmedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SubscribeArmedRequest& a, SubscribeArmedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeArmedRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeArmedRequest* New() const final {
    return CreateMaybeMessage<SubscribeArmedRequest>(nullptr);
  }

  SubscribeArmedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeArmedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeArmedRequest& from);
  void MergeFrom(const SubscribeArmedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeArmedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeArmedRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeArmedRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class ArmedResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.ArmedResponse) */ {
 public:
  ArmedResponse();
  virtual ~ArmedResponse();

  ArmedResponse(const ArmedResponse& from);
  ArmedResponse(ArmedResponse&& from) noexcept
    : ArmedResponse() {
    *this = ::std::move(from);
  }

  inline ArmedResponse& operator=(const ArmedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArmedResponse& operator=(ArmedResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArmedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArmedResponse* internal_default_instance() {
    return reinterpret_cast<const ArmedResponse*>(
               &_ArmedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ArmedResponse& a, ArmedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ArmedResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArmedResponse* New() const final {
    return CreateMaybeMessage<ArmedResponse>(nullptr);
  }

  ArmedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArmedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArmedResponse& from);
  void MergeFrom(const ArmedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArmedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.ArmedResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsArmedFieldNumber = 1,
  };
  // bool is_armed = 1;
  void clear_is_armed();
  bool is_armed() const;
  void set_is_armed(bool value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.ArmedResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_armed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeAttitudeQuaternionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest) */ {
 public:
  SubscribeAttitudeQuaternionRequest();
  virtual ~SubscribeAttitudeQuaternionRequest();

  SubscribeAttitudeQuaternionRequest(const SubscribeAttitudeQuaternionRequest& from);
  SubscribeAttitudeQuaternionRequest(SubscribeAttitudeQuaternionRequest&& from) noexcept
    : SubscribeAttitudeQuaternionRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeAttitudeQuaternionRequest& operator=(const SubscribeAttitudeQuaternionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeAttitudeQuaternionRequest& operator=(SubscribeAttitudeQuaternionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeAttitudeQuaternionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeAttitudeQuaternionRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeAttitudeQuaternionRequest*>(
               &_SubscribeAttitudeQuaternionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SubscribeAttitudeQuaternionRequest& a, SubscribeAttitudeQuaternionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeAttitudeQuaternionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeAttitudeQuaternionRequest* New() const final {
    return CreateMaybeMessage<SubscribeAttitudeQuaternionRequest>(nullptr);
  }

  SubscribeAttitudeQuaternionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeAttitudeQuaternionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeAttitudeQuaternionRequest& from);
  void MergeFrom(const SubscribeAttitudeQuaternionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeAttitudeQuaternionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeAttitudeQuaternionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class AttitudeQuaternionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.AttitudeQuaternionResponse) */ {
 public:
  AttitudeQuaternionResponse();
  virtual ~AttitudeQuaternionResponse();

  AttitudeQuaternionResponse(const AttitudeQuaternionResponse& from);
  AttitudeQuaternionResponse(AttitudeQuaternionResponse&& from) noexcept
    : AttitudeQuaternionResponse() {
    *this = ::std::move(from);
  }

  inline AttitudeQuaternionResponse& operator=(const AttitudeQuaternionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttitudeQuaternionResponse& operator=(AttitudeQuaternionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttitudeQuaternionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttitudeQuaternionResponse* internal_default_instance() {
    return reinterpret_cast<const AttitudeQuaternionResponse*>(
               &_AttitudeQuaternionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AttitudeQuaternionResponse& a, AttitudeQuaternionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AttitudeQuaternionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttitudeQuaternionResponse* New() const final {
    return CreateMaybeMessage<AttitudeQuaternionResponse>(nullptr);
  }

  AttitudeQuaternionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttitudeQuaternionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttitudeQuaternionResponse& from);
  void MergeFrom(const AttitudeQuaternionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttitudeQuaternionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.AttitudeQuaternionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudeQuaternionFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
  bool has_attitude_quaternion() const;
  private:
  bool _internal_has_attitude_quaternion() const;
  public:
  void clear_attitude_quaternion();
  const ::mavsdk::rpc::telemetry::Quaternion& attitude_quaternion() const;
  ::mavsdk::rpc::telemetry::Quaternion* release_attitude_quaternion();
  ::mavsdk::rpc::telemetry::Quaternion* mutable_attitude_quaternion();
  void set_allocated_attitude_quaternion(::mavsdk::rpc::telemetry::Quaternion* attitude_quaternion);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.AttitudeQuaternionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::Quaternion* attitude_quaternion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeAttitudeEulerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest) */ {
 public:
  SubscribeAttitudeEulerRequest();
  virtual ~SubscribeAttitudeEulerRequest();

  SubscribeAttitudeEulerRequest(const SubscribeAttitudeEulerRequest& from);
  SubscribeAttitudeEulerRequest(SubscribeAttitudeEulerRequest&& from) noexcept
    : SubscribeAttitudeEulerRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeAttitudeEulerRequest& operator=(const SubscribeAttitudeEulerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeAttitudeEulerRequest& operator=(SubscribeAttitudeEulerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeAttitudeEulerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeAttitudeEulerRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeAttitudeEulerRequest*>(
               &_SubscribeAttitudeEulerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SubscribeAttitudeEulerRequest& a, SubscribeAttitudeEulerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeAttitudeEulerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeAttitudeEulerRequest* New() const final {
    return CreateMaybeMessage<SubscribeAttitudeEulerRequest>(nullptr);
  }

  SubscribeAttitudeEulerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeAttitudeEulerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeAttitudeEulerRequest& from);
  void MergeFrom(const SubscribeAttitudeEulerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeAttitudeEulerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeAttitudeEulerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class AttitudeEulerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.AttitudeEulerResponse) */ {
 public:
  AttitudeEulerResponse();
  virtual ~AttitudeEulerResponse();

  AttitudeEulerResponse(const AttitudeEulerResponse& from);
  AttitudeEulerResponse(AttitudeEulerResponse&& from) noexcept
    : AttitudeEulerResponse() {
    *this = ::std::move(from);
  }

  inline AttitudeEulerResponse& operator=(const AttitudeEulerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttitudeEulerResponse& operator=(AttitudeEulerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttitudeEulerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttitudeEulerResponse* internal_default_instance() {
    return reinterpret_cast<const AttitudeEulerResponse*>(
               &_AttitudeEulerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AttitudeEulerResponse& a, AttitudeEulerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AttitudeEulerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttitudeEulerResponse* New() const final {
    return CreateMaybeMessage<AttitudeEulerResponse>(nullptr);
  }

  AttitudeEulerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttitudeEulerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttitudeEulerResponse& from);
  void MergeFrom(const AttitudeEulerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttitudeEulerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.AttitudeEulerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudeEulerFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
  bool has_attitude_euler() const;
  private:
  bool _internal_has_attitude_euler() const;
  public:
  void clear_attitude_euler();
  const ::mavsdk::rpc::telemetry::EulerAngle& attitude_euler() const;
  ::mavsdk::rpc::telemetry::EulerAngle* release_attitude_euler();
  ::mavsdk::rpc::telemetry::EulerAngle* mutable_attitude_euler();
  void set_allocated_attitude_euler(::mavsdk::rpc::telemetry::EulerAngle* attitude_euler);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.AttitudeEulerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::EulerAngle* attitude_euler_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeAttitudeAngularVelocityBodyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest) */ {
 public:
  SubscribeAttitudeAngularVelocityBodyRequest();
  virtual ~SubscribeAttitudeAngularVelocityBodyRequest();

  SubscribeAttitudeAngularVelocityBodyRequest(const SubscribeAttitudeAngularVelocityBodyRequest& from);
  SubscribeAttitudeAngularVelocityBodyRequest(SubscribeAttitudeAngularVelocityBodyRequest&& from) noexcept
    : SubscribeAttitudeAngularVelocityBodyRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeAttitudeAngularVelocityBodyRequest& operator=(const SubscribeAttitudeAngularVelocityBodyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeAttitudeAngularVelocityBodyRequest& operator=(SubscribeAttitudeAngularVelocityBodyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeAttitudeAngularVelocityBodyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeAttitudeAngularVelocityBodyRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeAttitudeAngularVelocityBodyRequest*>(
               &_SubscribeAttitudeAngularVelocityBodyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SubscribeAttitudeAngularVelocityBodyRequest& a, SubscribeAttitudeAngularVelocityBodyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeAttitudeAngularVelocityBodyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeAttitudeAngularVelocityBodyRequest* New() const final {
    return CreateMaybeMessage<SubscribeAttitudeAngularVelocityBodyRequest>(nullptr);
  }

  SubscribeAttitudeAngularVelocityBodyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeAttitudeAngularVelocityBodyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeAttitudeAngularVelocityBodyRequest& from);
  void MergeFrom(const SubscribeAttitudeAngularVelocityBodyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeAttitudeAngularVelocityBodyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeAttitudeAngularVelocityBodyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class AttitudeAngularVelocityBodyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse) */ {
 public:
  AttitudeAngularVelocityBodyResponse();
  virtual ~AttitudeAngularVelocityBodyResponse();

  AttitudeAngularVelocityBodyResponse(const AttitudeAngularVelocityBodyResponse& from);
  AttitudeAngularVelocityBodyResponse(AttitudeAngularVelocityBodyResponse&& from) noexcept
    : AttitudeAngularVelocityBodyResponse() {
    *this = ::std::move(from);
  }

  inline AttitudeAngularVelocityBodyResponse& operator=(const AttitudeAngularVelocityBodyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttitudeAngularVelocityBodyResponse& operator=(AttitudeAngularVelocityBodyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AttitudeAngularVelocityBodyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttitudeAngularVelocityBodyResponse* internal_default_instance() {
    return reinterpret_cast<const AttitudeAngularVelocityBodyResponse*>(
               &_AttitudeAngularVelocityBodyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AttitudeAngularVelocityBodyResponse& a, AttitudeAngularVelocityBodyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AttitudeAngularVelocityBodyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AttitudeAngularVelocityBodyResponse* New() const final {
    return CreateMaybeMessage<AttitudeAngularVelocityBodyResponse>(nullptr);
  }

  AttitudeAngularVelocityBodyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AttitudeAngularVelocityBodyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AttitudeAngularVelocityBodyResponse& from);
  void MergeFrom(const AttitudeAngularVelocityBodyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttitudeAngularVelocityBodyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudeAngularVelocityBodyFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.AngularVelocityBody attitude_angular_velocity_body = 1;
  bool has_attitude_angular_velocity_body() const;
  private:
  bool _internal_has_attitude_angular_velocity_body() const;
  public:
  void clear_attitude_angular_velocity_body();
  const ::mavsdk::rpc::telemetry::AngularVelocityBody& attitude_angular_velocity_body() const;
  ::mavsdk::rpc::telemetry::AngularVelocityBody* release_attitude_angular_velocity_body();
  ::mavsdk::rpc::telemetry::AngularVelocityBody* mutable_attitude_angular_velocity_body();
  void set_allocated_attitude_angular_velocity_body(::mavsdk::rpc::telemetry::AngularVelocityBody* attitude_angular_velocity_body);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::AngularVelocityBody* attitude_angular_velocity_body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCameraAttitudeQuaternionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest) */ {
 public:
  SubscribeCameraAttitudeQuaternionRequest();
  virtual ~SubscribeCameraAttitudeQuaternionRequest();

  SubscribeCameraAttitudeQuaternionRequest(const SubscribeCameraAttitudeQuaternionRequest& from);
  SubscribeCameraAttitudeQuaternionRequest(SubscribeCameraAttitudeQuaternionRequest&& from) noexcept
    : SubscribeCameraAttitudeQuaternionRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCameraAttitudeQuaternionRequest& operator=(const SubscribeCameraAttitudeQuaternionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCameraAttitudeQuaternionRequest& operator=(SubscribeCameraAttitudeQuaternionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeCameraAttitudeQuaternionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeCameraAttitudeQuaternionRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCameraAttitudeQuaternionRequest*>(
               &_SubscribeCameraAttitudeQuaternionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SubscribeCameraAttitudeQuaternionRequest& a, SubscribeCameraAttitudeQuaternionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCameraAttitudeQuaternionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeCameraAttitudeQuaternionRequest* New() const final {
    return CreateMaybeMessage<SubscribeCameraAttitudeQuaternionRequest>(nullptr);
  }

  SubscribeCameraAttitudeQuaternionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeCameraAttitudeQuaternionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeCameraAttitudeQuaternionRequest& from);
  void MergeFrom(const SubscribeCameraAttitudeQuaternionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeCameraAttitudeQuaternionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeCameraAttitudeQuaternionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class CameraAttitudeQuaternionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse) */ {
 public:
  CameraAttitudeQuaternionResponse();
  virtual ~CameraAttitudeQuaternionResponse();

  CameraAttitudeQuaternionResponse(const CameraAttitudeQuaternionResponse& from);
  CameraAttitudeQuaternionResponse(CameraAttitudeQuaternionResponse&& from) noexcept
    : CameraAttitudeQuaternionResponse() {
    *this = ::std::move(from);
  }

  inline CameraAttitudeQuaternionResponse& operator=(const CameraAttitudeQuaternionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraAttitudeQuaternionResponse& operator=(CameraAttitudeQuaternionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraAttitudeQuaternionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraAttitudeQuaternionResponse* internal_default_instance() {
    return reinterpret_cast<const CameraAttitudeQuaternionResponse*>(
               &_CameraAttitudeQuaternionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CameraAttitudeQuaternionResponse& a, CameraAttitudeQuaternionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraAttitudeQuaternionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraAttitudeQuaternionResponse* New() const final {
    return CreateMaybeMessage<CameraAttitudeQuaternionResponse>(nullptr);
  }

  CameraAttitudeQuaternionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraAttitudeQuaternionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraAttitudeQuaternionResponse& from);
  void MergeFrom(const CameraAttitudeQuaternionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraAttitudeQuaternionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudeQuaternionFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
  bool has_attitude_quaternion() const;
  private:
  bool _internal_has_attitude_quaternion() const;
  public:
  void clear_attitude_quaternion();
  const ::mavsdk::rpc::telemetry::Quaternion& attitude_quaternion() const;
  ::mavsdk::rpc::telemetry::Quaternion* release_attitude_quaternion();
  ::mavsdk::rpc::telemetry::Quaternion* mutable_attitude_quaternion();
  void set_allocated_attitude_quaternion(::mavsdk::rpc::telemetry::Quaternion* attitude_quaternion);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::Quaternion* attitude_quaternion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCameraAttitudeEulerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest) */ {
 public:
  SubscribeCameraAttitudeEulerRequest();
  virtual ~SubscribeCameraAttitudeEulerRequest();

  SubscribeCameraAttitudeEulerRequest(const SubscribeCameraAttitudeEulerRequest& from);
  SubscribeCameraAttitudeEulerRequest(SubscribeCameraAttitudeEulerRequest&& from) noexcept
    : SubscribeCameraAttitudeEulerRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeCameraAttitudeEulerRequest& operator=(const SubscribeCameraAttitudeEulerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCameraAttitudeEulerRequest& operator=(SubscribeCameraAttitudeEulerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeCameraAttitudeEulerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeCameraAttitudeEulerRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCameraAttitudeEulerRequest*>(
               &_SubscribeCameraAttitudeEulerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SubscribeCameraAttitudeEulerRequest& a, SubscribeCameraAttitudeEulerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCameraAttitudeEulerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeCameraAttitudeEulerRequest* New() const final {
    return CreateMaybeMessage<SubscribeCameraAttitudeEulerRequest>(nullptr);
  }

  SubscribeCameraAttitudeEulerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeCameraAttitudeEulerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeCameraAttitudeEulerRequest& from);
  void MergeFrom(const SubscribeCameraAttitudeEulerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeCameraAttitudeEulerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeCameraAttitudeEulerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class CameraAttitudeEulerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse) */ {
 public:
  CameraAttitudeEulerResponse();
  virtual ~CameraAttitudeEulerResponse();

  CameraAttitudeEulerResponse(const CameraAttitudeEulerResponse& from);
  CameraAttitudeEulerResponse(CameraAttitudeEulerResponse&& from) noexcept
    : CameraAttitudeEulerResponse() {
    *this = ::std::move(from);
  }

  inline CameraAttitudeEulerResponse& operator=(const CameraAttitudeEulerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraAttitudeEulerResponse& operator=(CameraAttitudeEulerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraAttitudeEulerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraAttitudeEulerResponse* internal_default_instance() {
    return reinterpret_cast<const CameraAttitudeEulerResponse*>(
               &_CameraAttitudeEulerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CameraAttitudeEulerResponse& a, CameraAttitudeEulerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraAttitudeEulerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraAttitudeEulerResponse* New() const final {
    return CreateMaybeMessage<CameraAttitudeEulerResponse>(nullptr);
  }

  CameraAttitudeEulerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraAttitudeEulerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraAttitudeEulerResponse& from);
  void MergeFrom(const CameraAttitudeEulerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraAttitudeEulerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.CameraAttitudeEulerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttitudeEulerFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
  bool has_attitude_euler() const;
  private:
  bool _internal_has_attitude_euler() const;
  public:
  void clear_attitude_euler();
  const ::mavsdk::rpc::telemetry::EulerAngle& attitude_euler() const;
  ::mavsdk::rpc::telemetry::EulerAngle* release_attitude_euler();
  ::mavsdk::rpc::telemetry::EulerAngle* mutable_attitude_euler();
  void set_allocated_attitude_euler(::mavsdk::rpc::telemetry::EulerAngle* attitude_euler);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::EulerAngle* attitude_euler_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeGroundSpeedNedRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest) */ {
 public:
  SubscribeGroundSpeedNedRequest();
  virtual ~SubscribeGroundSpeedNedRequest();

  SubscribeGroundSpeedNedRequest(const SubscribeGroundSpeedNedRequest& from);
  SubscribeGroundSpeedNedRequest(SubscribeGroundSpeedNedRequest&& from) noexcept
    : SubscribeGroundSpeedNedRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeGroundSpeedNedRequest& operator=(const SubscribeGroundSpeedNedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeGroundSpeedNedRequest& operator=(SubscribeGroundSpeedNedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeGroundSpeedNedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeGroundSpeedNedRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeGroundSpeedNedRequest*>(
               &_SubscribeGroundSpeedNedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SubscribeGroundSpeedNedRequest& a, SubscribeGroundSpeedNedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeGroundSpeedNedRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeGroundSpeedNedRequest* New() const final {
    return CreateMaybeMessage<SubscribeGroundSpeedNedRequest>(nullptr);
  }

  SubscribeGroundSpeedNedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeGroundSpeedNedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeGroundSpeedNedRequest& from);
  void MergeFrom(const SubscribeGroundSpeedNedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeGroundSpeedNedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeGroundSpeedNedRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class GroundSpeedNedResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.GroundSpeedNedResponse) */ {
 public:
  GroundSpeedNedResponse();
  virtual ~GroundSpeedNedResponse();

  GroundSpeedNedResponse(const GroundSpeedNedResponse& from);
  GroundSpeedNedResponse(GroundSpeedNedResponse&& from) noexcept
    : GroundSpeedNedResponse() {
    *this = ::std::move(from);
  }

  inline GroundSpeedNedResponse& operator=(const GroundSpeedNedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroundSpeedNedResponse& operator=(GroundSpeedNedResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroundSpeedNedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroundSpeedNedResponse* internal_default_instance() {
    return reinterpret_cast<const GroundSpeedNedResponse*>(
               &_GroundSpeedNedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GroundSpeedNedResponse& a, GroundSpeedNedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GroundSpeedNedResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroundSpeedNedResponse* New() const final {
    return CreateMaybeMessage<GroundSpeedNedResponse>(nullptr);
  }

  GroundSpeedNedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroundSpeedNedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroundSpeedNedResponse& from);
  void MergeFrom(const GroundSpeedNedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroundSpeedNedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.GroundSpeedNedResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroundSpeedNedFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.SpeedNed ground_speed_ned = 1;
  bool has_ground_speed_ned() const;
  private:
  bool _internal_has_ground_speed_ned() const;
  public:
  void clear_ground_speed_ned();
  const ::mavsdk::rpc::telemetry::SpeedNed& ground_speed_ned() const;
  ::mavsdk::rpc::telemetry::SpeedNed* release_ground_speed_ned();
  ::mavsdk::rpc::telemetry::SpeedNed* mutable_ground_speed_ned();
  void set_allocated_ground_speed_ned(::mavsdk::rpc::telemetry::SpeedNed* ground_speed_ned);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.GroundSpeedNedResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::SpeedNed* ground_speed_ned_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeGpsInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest) */ {
 public:
  SubscribeGpsInfoRequest();
  virtual ~SubscribeGpsInfoRequest();

  SubscribeGpsInfoRequest(const SubscribeGpsInfoRequest& from);
  SubscribeGpsInfoRequest(SubscribeGpsInfoRequest&& from) noexcept
    : SubscribeGpsInfoRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeGpsInfoRequest& operator=(const SubscribeGpsInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeGpsInfoRequest& operator=(SubscribeGpsInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeGpsInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeGpsInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeGpsInfoRequest*>(
               &_SubscribeGpsInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SubscribeGpsInfoRequest& a, SubscribeGpsInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeGpsInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeGpsInfoRequest* New() const final {
    return CreateMaybeMessage<SubscribeGpsInfoRequest>(nullptr);
  }

  SubscribeGpsInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeGpsInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeGpsInfoRequest& from);
  void MergeFrom(const SubscribeGpsInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeGpsInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeGpsInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeGpsInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class GpsInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.GpsInfoResponse) */ {
 public:
  GpsInfoResponse();
  virtual ~GpsInfoResponse();

  GpsInfoResponse(const GpsInfoResponse& from);
  GpsInfoResponse(GpsInfoResponse&& from) noexcept
    : GpsInfoResponse() {
    *this = ::std::move(from);
  }

  inline GpsInfoResponse& operator=(const GpsInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpsInfoResponse& operator=(GpsInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GpsInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpsInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GpsInfoResponse*>(
               &_GpsInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GpsInfoResponse& a, GpsInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GpsInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpsInfoResponse* New() const final {
    return CreateMaybeMessage<GpsInfoResponse>(nullptr);
  }

  GpsInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpsInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GpsInfoResponse& from);
  void MergeFrom(const GpsInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpsInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.GpsInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGpsInfoFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.GpsInfo gps_info = 1;
  bool has_gps_info() const;
  private:
  bool _internal_has_gps_info() const;
  public:
  void clear_gps_info();
  const ::mavsdk::rpc::telemetry::GpsInfo& gps_info() const;
  ::mavsdk::rpc::telemetry::GpsInfo* release_gps_info();
  ::mavsdk::rpc::telemetry::GpsInfo* mutable_gps_info();
  void set_allocated_gps_info(::mavsdk::rpc::telemetry::GpsInfo* gps_info);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.GpsInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::GpsInfo* gps_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeBatteryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeBatteryRequest) */ {
 public:
  SubscribeBatteryRequest();
  virtual ~SubscribeBatteryRequest();

  SubscribeBatteryRequest(const SubscribeBatteryRequest& from);
  SubscribeBatteryRequest(SubscribeBatteryRequest&& from) noexcept
    : SubscribeBatteryRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeBatteryRequest& operator=(const SubscribeBatteryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeBatteryRequest& operator=(SubscribeBatteryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeBatteryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeBatteryRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeBatteryRequest*>(
               &_SubscribeBatteryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SubscribeBatteryRequest& a, SubscribeBatteryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeBatteryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeBatteryRequest* New() const final {
    return CreateMaybeMessage<SubscribeBatteryRequest>(nullptr);
  }

  SubscribeBatteryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeBatteryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeBatteryRequest& from);
  void MergeFrom(const SubscribeBatteryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeBatteryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeBatteryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeBatteryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class BatteryResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.BatteryResponse) */ {
 public:
  BatteryResponse();
  virtual ~BatteryResponse();

  BatteryResponse(const BatteryResponse& from);
  BatteryResponse(BatteryResponse&& from) noexcept
    : BatteryResponse() {
    *this = ::std::move(from);
  }

  inline BatteryResponse& operator=(const BatteryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryResponse& operator=(BatteryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BatteryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatteryResponse* internal_default_instance() {
    return reinterpret_cast<const BatteryResponse*>(
               &_BatteryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(BatteryResponse& a, BatteryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatteryResponse* New() const final {
    return CreateMaybeMessage<BatteryResponse>(nullptr);
  }

  BatteryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatteryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BatteryResponse& from);
  void MergeFrom(const BatteryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.BatteryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBatteryFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Battery battery = 1;
  bool has_battery() const;
  private:
  bool _internal_has_battery() const;
  public:
  void clear_battery();
  const ::mavsdk::rpc::telemetry::Battery& battery() const;
  ::mavsdk::rpc::telemetry::Battery* release_battery();
  ::mavsdk::rpc::telemetry::Battery* mutable_battery();
  void set_allocated_battery(::mavsdk::rpc::telemetry::Battery* battery);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.BatteryResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::Battery* battery_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeFlightModeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeFlightModeRequest) */ {
 public:
  SubscribeFlightModeRequest();
  virtual ~SubscribeFlightModeRequest();

  SubscribeFlightModeRequest(const SubscribeFlightModeRequest& from);
  SubscribeFlightModeRequest(SubscribeFlightModeRequest&& from) noexcept
    : SubscribeFlightModeRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeFlightModeRequest& operator=(const SubscribeFlightModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeFlightModeRequest& operator=(SubscribeFlightModeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeFlightModeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeFlightModeRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeFlightModeRequest*>(
               &_SubscribeFlightModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SubscribeFlightModeRequest& a, SubscribeFlightModeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeFlightModeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeFlightModeRequest* New() const final {
    return CreateMaybeMessage<SubscribeFlightModeRequest>(nullptr);
  }

  SubscribeFlightModeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeFlightModeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeFlightModeRequest& from);
  void MergeFrom(const SubscribeFlightModeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeFlightModeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeFlightModeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeFlightModeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class FlightModeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.FlightModeResponse) */ {
 public:
  FlightModeResponse();
  virtual ~FlightModeResponse();

  FlightModeResponse(const FlightModeResponse& from);
  FlightModeResponse(FlightModeResponse&& from) noexcept
    : FlightModeResponse() {
    *this = ::std::move(from);
  }

  inline FlightModeResponse& operator=(const FlightModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlightModeResponse& operator=(FlightModeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlightModeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlightModeResponse* internal_default_instance() {
    return reinterpret_cast<const FlightModeResponse*>(
               &_FlightModeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(FlightModeResponse& a, FlightModeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FlightModeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlightModeResponse* New() const final {
    return CreateMaybeMessage<FlightModeResponse>(nullptr);
  }

  FlightModeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlightModeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlightModeResponse& from);
  void MergeFrom(const FlightModeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlightModeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.FlightModeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlightModeFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.FlightMode flight_mode = 1;
  void clear_flight_mode();
  ::mavsdk::rpc::telemetry::FlightMode flight_mode() const;
  void set_flight_mode(::mavsdk::rpc::telemetry::FlightMode value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.FlightModeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int flight_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeHealthRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeHealthRequest) */ {
 public:
  SubscribeHealthRequest();
  virtual ~SubscribeHealthRequest();

  SubscribeHealthRequest(const SubscribeHealthRequest& from);
  SubscribeHealthRequest(SubscribeHealthRequest&& from) noexcept
    : SubscribeHealthRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeHealthRequest& operator=(const SubscribeHealthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeHealthRequest& operator=(SubscribeHealthRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeHealthRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeHealthRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeHealthRequest*>(
               &_SubscribeHealthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SubscribeHealthRequest& a, SubscribeHealthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeHealthRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeHealthRequest* New() const final {
    return CreateMaybeMessage<SubscribeHealthRequest>(nullptr);
  }

  SubscribeHealthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeHealthRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeHealthRequest& from);
  void MergeFrom(const SubscribeHealthRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeHealthRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeHealthRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeHealthRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class HealthResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.HealthResponse) */ {
 public:
  HealthResponse();
  virtual ~HealthResponse();

  HealthResponse(const HealthResponse& from);
  HealthResponse(HealthResponse&& from) noexcept
    : HealthResponse() {
    *this = ::std::move(from);
  }

  inline HealthResponse& operator=(const HealthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthResponse& operator=(HealthResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthResponse* internal_default_instance() {
    return reinterpret_cast<const HealthResponse*>(
               &_HealthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(HealthResponse& a, HealthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthResponse* New() const final {
    return CreateMaybeMessage<HealthResponse>(nullptr);
  }

  HealthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthResponse& from);
  void MergeFrom(const HealthResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.HealthResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHealthFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Health health = 1;
  bool has_health() const;
  private:
  bool _internal_has_health() const;
  public:
  void clear_health();
  const ::mavsdk::rpc::telemetry::Health& health() const;
  ::mavsdk::rpc::telemetry::Health* release_health();
  ::mavsdk::rpc::telemetry::Health* mutable_health();
  void set_allocated_health(::mavsdk::rpc::telemetry::Health* health);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.HealthResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::Health* health_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeRcStatusRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeRcStatusRequest) */ {
 public:
  SubscribeRcStatusRequest();
  virtual ~SubscribeRcStatusRequest();

  SubscribeRcStatusRequest(const SubscribeRcStatusRequest& from);
  SubscribeRcStatusRequest(SubscribeRcStatusRequest&& from) noexcept
    : SubscribeRcStatusRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeRcStatusRequest& operator=(const SubscribeRcStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeRcStatusRequest& operator=(SubscribeRcStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeRcStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeRcStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeRcStatusRequest*>(
               &_SubscribeRcStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SubscribeRcStatusRequest& a, SubscribeRcStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeRcStatusRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeRcStatusRequest* New() const final {
    return CreateMaybeMessage<SubscribeRcStatusRequest>(nullptr);
  }

  SubscribeRcStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeRcStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeRcStatusRequest& from);
  void MergeFrom(const SubscribeRcStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeRcStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeRcStatusRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeRcStatusRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class RcStatusResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.RcStatusResponse) */ {
 public:
  RcStatusResponse();
  virtual ~RcStatusResponse();

  RcStatusResponse(const RcStatusResponse& from);
  RcStatusResponse(RcStatusResponse&& from) noexcept
    : RcStatusResponse() {
    *this = ::std::move(from);
  }

  inline RcStatusResponse& operator=(const RcStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RcStatusResponse& operator=(RcStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RcStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RcStatusResponse* internal_default_instance() {
    return reinterpret_cast<const RcStatusResponse*>(
               &_RcStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(RcStatusResponse& a, RcStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RcStatusResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RcStatusResponse* New() const final {
    return CreateMaybeMessage<RcStatusResponse>(nullptr);
  }

  RcStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RcStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RcStatusResponse& from);
  void MergeFrom(const RcStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RcStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.RcStatusResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRcStatusFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.RcStatus rc_status = 1;
  bool has_rc_status() const;
  private:
  bool _internal_has_rc_status() const;
  public:
  void clear_rc_status();
  const ::mavsdk::rpc::telemetry::RcStatus& rc_status() const;
  ::mavsdk::rpc::telemetry::RcStatus* release_rc_status();
  ::mavsdk::rpc::telemetry::RcStatus* mutable_rc_status();
  void set_allocated_rc_status(::mavsdk::rpc::telemetry::RcStatus* rc_status);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.RcStatusResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::RcStatus* rc_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeStatusTextRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeStatusTextRequest) */ {
 public:
  SubscribeStatusTextRequest();
  virtual ~SubscribeStatusTextRequest();

  SubscribeStatusTextRequest(const SubscribeStatusTextRequest& from);
  SubscribeStatusTextRequest(SubscribeStatusTextRequest&& from) noexcept
    : SubscribeStatusTextRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeStatusTextRequest& operator=(const SubscribeStatusTextRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeStatusTextRequest& operator=(SubscribeStatusTextRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeStatusTextRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeStatusTextRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeStatusTextRequest*>(
               &_SubscribeStatusTextRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SubscribeStatusTextRequest& a, SubscribeStatusTextRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeStatusTextRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeStatusTextRequest* New() const final {
    return CreateMaybeMessage<SubscribeStatusTextRequest>(nullptr);
  }

  SubscribeStatusTextRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeStatusTextRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeStatusTextRequest& from);
  void MergeFrom(const SubscribeStatusTextRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeStatusTextRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeStatusTextRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeStatusTextRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class StatusTextResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.StatusTextResponse) */ {
 public:
  StatusTextResponse();
  virtual ~StatusTextResponse();

  StatusTextResponse(const StatusTextResponse& from);
  StatusTextResponse(StatusTextResponse&& from) noexcept
    : StatusTextResponse() {
    *this = ::std::move(from);
  }

  inline StatusTextResponse& operator=(const StatusTextResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusTextResponse& operator=(StatusTextResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusTextResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusTextResponse* internal_default_instance() {
    return reinterpret_cast<const StatusTextResponse*>(
               &_StatusTextResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(StatusTextResponse& a, StatusTextResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusTextResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusTextResponse* New() const final {
    return CreateMaybeMessage<StatusTextResponse>(nullptr);
  }

  StatusTextResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusTextResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusTextResponse& from);
  void MergeFrom(const StatusTextResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusTextResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.StatusTextResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusTextFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.StatusText status_text = 1;
  bool has_status_text() const;
  private:
  bool _internal_has_status_text() const;
  public:
  void clear_status_text();
  const ::mavsdk::rpc::telemetry::StatusText& status_text() const;
  ::mavsdk::rpc::telemetry::StatusText* release_status_text();
  ::mavsdk::rpc::telemetry::StatusText* mutable_status_text();
  void set_allocated_status_text(::mavsdk::rpc::telemetry::StatusText* status_text);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.StatusTextResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::StatusText* status_text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeActuatorControlTargetRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest) */ {
 public:
  SubscribeActuatorControlTargetRequest();
  virtual ~SubscribeActuatorControlTargetRequest();

  SubscribeActuatorControlTargetRequest(const SubscribeActuatorControlTargetRequest& from);
  SubscribeActuatorControlTargetRequest(SubscribeActuatorControlTargetRequest&& from) noexcept
    : SubscribeActuatorControlTargetRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeActuatorControlTargetRequest& operator=(const SubscribeActuatorControlTargetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeActuatorControlTargetRequest& operator=(SubscribeActuatorControlTargetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeActuatorControlTargetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeActuatorControlTargetRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeActuatorControlTargetRequest*>(
               &_SubscribeActuatorControlTargetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SubscribeActuatorControlTargetRequest& a, SubscribeActuatorControlTargetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeActuatorControlTargetRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeActuatorControlTargetRequest* New() const final {
    return CreateMaybeMessage<SubscribeActuatorControlTargetRequest>(nullptr);
  }

  SubscribeActuatorControlTargetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeActuatorControlTargetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeActuatorControlTargetRequest& from);
  void MergeFrom(const SubscribeActuatorControlTargetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeActuatorControlTargetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeActuatorControlTargetRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class ActuatorControlTargetResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.ActuatorControlTargetResponse) */ {
 public:
  ActuatorControlTargetResponse();
  virtual ~ActuatorControlTargetResponse();

  ActuatorControlTargetResponse(const ActuatorControlTargetResponse& from);
  ActuatorControlTargetResponse(ActuatorControlTargetResponse&& from) noexcept
    : ActuatorControlTargetResponse() {
    *this = ::std::move(from);
  }

  inline ActuatorControlTargetResponse& operator=(const ActuatorControlTargetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorControlTargetResponse& operator=(ActuatorControlTargetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActuatorControlTargetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorControlTargetResponse* internal_default_instance() {
    return reinterpret_cast<const ActuatorControlTargetResponse*>(
               &_ActuatorControlTargetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ActuatorControlTargetResponse& a, ActuatorControlTargetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorControlTargetResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActuatorControlTargetResponse* New() const final {
    return CreateMaybeMessage<ActuatorControlTargetResponse>(nullptr);
  }

  ActuatorControlTargetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActuatorControlTargetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActuatorControlTargetResponse& from);
  void MergeFrom(const ActuatorControlTargetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorControlTargetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.ActuatorControlTargetResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActuatorControlTargetFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.ActuatorControlTarget actuator_control_target = 1;
  bool has_actuator_control_target() const;
  private:
  bool _internal_has_actuator_control_target() const;
  public:
  void clear_actuator_control_target();
  const ::mavsdk::rpc::telemetry::ActuatorControlTarget& actuator_control_target() const;
  ::mavsdk::rpc::telemetry::ActuatorControlTarget* release_actuator_control_target();
  ::mavsdk::rpc::telemetry::ActuatorControlTarget* mutable_actuator_control_target();
  void set_allocated_actuator_control_target(::mavsdk::rpc::telemetry::ActuatorControlTarget* actuator_control_target);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.ActuatorControlTargetResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::ActuatorControlTarget* actuator_control_target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeActuatorOutputStatusRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest) */ {
 public:
  SubscribeActuatorOutputStatusRequest();
  virtual ~SubscribeActuatorOutputStatusRequest();

  SubscribeActuatorOutputStatusRequest(const SubscribeActuatorOutputStatusRequest& from);
  SubscribeActuatorOutputStatusRequest(SubscribeActuatorOutputStatusRequest&& from) noexcept
    : SubscribeActuatorOutputStatusRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeActuatorOutputStatusRequest& operator=(const SubscribeActuatorOutputStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeActuatorOutputStatusRequest& operator=(SubscribeActuatorOutputStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeActuatorOutputStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeActuatorOutputStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeActuatorOutputStatusRequest*>(
               &_SubscribeActuatorOutputStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SubscribeActuatorOutputStatusRequest& a, SubscribeActuatorOutputStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeActuatorOutputStatusRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeActuatorOutputStatusRequest* New() const final {
    return CreateMaybeMessage<SubscribeActuatorOutputStatusRequest>(nullptr);
  }

  SubscribeActuatorOutputStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeActuatorOutputStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeActuatorOutputStatusRequest& from);
  void MergeFrom(const SubscribeActuatorOutputStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeActuatorOutputStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeActuatorOutputStatusRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class ActuatorOutputStatusResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse) */ {
 public:
  ActuatorOutputStatusResponse();
  virtual ~ActuatorOutputStatusResponse();

  ActuatorOutputStatusResponse(const ActuatorOutputStatusResponse& from);
  ActuatorOutputStatusResponse(ActuatorOutputStatusResponse&& from) noexcept
    : ActuatorOutputStatusResponse() {
    *this = ::std::move(from);
  }

  inline ActuatorOutputStatusResponse& operator=(const ActuatorOutputStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorOutputStatusResponse& operator=(ActuatorOutputStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActuatorOutputStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorOutputStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ActuatorOutputStatusResponse*>(
               &_ActuatorOutputStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ActuatorOutputStatusResponse& a, ActuatorOutputStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorOutputStatusResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActuatorOutputStatusResponse* New() const final {
    return CreateMaybeMessage<ActuatorOutputStatusResponse>(nullptr);
  }

  ActuatorOutputStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActuatorOutputStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActuatorOutputStatusResponse& from);
  void MergeFrom(const ActuatorOutputStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorOutputStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.ActuatorOutputStatusResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActuatorOutputStatusFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.ActuatorOutputStatus actuator_output_status = 1;
  bool has_actuator_output_status() const;
  private:
  bool _internal_has_actuator_output_status() const;
  public:
  void clear_actuator_output_status();
  const ::mavsdk::rpc::telemetry::ActuatorOutputStatus& actuator_output_status() const;
  ::mavsdk::rpc::telemetry::ActuatorOutputStatus* release_actuator_output_status();
  ::mavsdk::rpc::telemetry::ActuatorOutputStatus* mutable_actuator_output_status();
  void set_allocated_actuator_output_status(::mavsdk::rpc::telemetry::ActuatorOutputStatus* actuator_output_status);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::ActuatorOutputStatus* actuator_output_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SubscribeOdometryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SubscribeOdometryRequest) */ {
 public:
  SubscribeOdometryRequest();
  virtual ~SubscribeOdometryRequest();

  SubscribeOdometryRequest(const SubscribeOdometryRequest& from);
  SubscribeOdometryRequest(SubscribeOdometryRequest&& from) noexcept
    : SubscribeOdometryRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeOdometryRequest& operator=(const SubscribeOdometryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeOdometryRequest& operator=(SubscribeOdometryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeOdometryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeOdometryRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeOdometryRequest*>(
               &_SubscribeOdometryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SubscribeOdometryRequest& a, SubscribeOdometryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeOdometryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeOdometryRequest* New() const final {
    return CreateMaybeMessage<SubscribeOdometryRequest>(nullptr);
  }

  SubscribeOdometryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeOdometryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeOdometryRequest& from);
  void MergeFrom(const SubscribeOdometryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeOdometryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SubscribeOdometryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SubscribeOdometryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class OdometryResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.OdometryResponse) */ {
 public:
  OdometryResponse();
  virtual ~OdometryResponse();

  OdometryResponse(const OdometryResponse& from);
  OdometryResponse(OdometryResponse&& from) noexcept
    : OdometryResponse() {
    *this = ::std::move(from);
  }

  inline OdometryResponse& operator=(const OdometryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OdometryResponse& operator=(OdometryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OdometryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OdometryResponse* internal_default_instance() {
    return reinterpret_cast<const OdometryResponse*>(
               &_OdometryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(OdometryResponse& a, OdometryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OdometryResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OdometryResponse* New() const final {
    return CreateMaybeMessage<OdometryResponse>(nullptr);
  }

  OdometryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OdometryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OdometryResponse& from);
  void MergeFrom(const OdometryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OdometryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.OdometryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOdometryFieldNumber = 1,
  };
  // .mavsdk.rpc.telemetry.Odometry odometry = 1;
  bool has_odometry() const;
  private:
  bool _internal_has_odometry() const;
  public:
  void clear_odometry();
  const ::mavsdk::rpc::telemetry::Odometry& odometry() const;
  ::mavsdk::rpc::telemetry::Odometry* release_odometry();
  ::mavsdk::rpc::telemetry::Odometry* mutable_odometry();
  void set_allocated_odometry(::mavsdk::rpc::telemetry::Odometry* odometry);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.OdometryResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::Odometry* odometry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class Position :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.Position";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kAbsoluteAltitudeMFieldNumber = 3,
    kRelativeAltitudeMFieldNumber = 4,
  };
  // double latitude_deg = 1;
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);

  // double longitude_deg = 2;
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);

  // float absolute_altitude_m = 3;
  void clear_absolute_altitude_m();
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);

  // float relative_altitude_m = 4;
  void clear_relative_altitude_m();
  float relative_altitude_m() const;
  void set_relative_altitude_m(float value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.Position)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double latitude_deg_;
  double longitude_deg_;
  float absolute_altitude_m_;
  float relative_altitude_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class Quaternion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.Quaternion) */ {
 public:
  Quaternion();
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(nullptr);
  }

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.Quaternion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // float w = 1;
  void clear_w();
  float w() const;
  void set_w(float value);

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.Quaternion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float w_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class EulerAngle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.EulerAngle) */ {
 public:
  EulerAngle();
  virtual ~EulerAngle();

  EulerAngle(const EulerAngle& from);
  EulerAngle(EulerAngle&& from) noexcept
    : EulerAngle() {
    *this = ::std::move(from);
  }

  inline EulerAngle& operator=(const EulerAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline EulerAngle& operator=(EulerAngle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EulerAngle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EulerAngle* internal_default_instance() {
    return reinterpret_cast<const EulerAngle*>(
               &_EulerAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(EulerAngle& a, EulerAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(EulerAngle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EulerAngle* New() const final {
    return CreateMaybeMessage<EulerAngle>(nullptr);
  }

  EulerAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EulerAngle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EulerAngle& from);
  void MergeFrom(const EulerAngle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EulerAngle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.EulerAngle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollDegFieldNumber = 1,
    kPitchDegFieldNumber = 2,
    kYawDegFieldNumber = 3,
  };
  // float roll_deg = 1;
  void clear_roll_deg();
  float roll_deg() const;
  void set_roll_deg(float value);

  // float pitch_deg = 2;
  void clear_pitch_deg();
  float pitch_deg() const;
  void set_pitch_deg(float value);

  // float yaw_deg = 3;
  void clear_yaw_deg();
  float yaw_deg() const;
  void set_yaw_deg(float value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.EulerAngle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float roll_deg_;
  float pitch_deg_;
  float yaw_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class AngularVelocityBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.AngularVelocityBody) */ {
 public:
  AngularVelocityBody();
  virtual ~AngularVelocityBody();

  AngularVelocityBody(const AngularVelocityBody& from);
  AngularVelocityBody(AngularVelocityBody&& from) noexcept
    : AngularVelocityBody() {
    *this = ::std::move(from);
  }

  inline AngularVelocityBody& operator=(const AngularVelocityBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline AngularVelocityBody& operator=(AngularVelocityBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AngularVelocityBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AngularVelocityBody* internal_default_instance() {
    return reinterpret_cast<const AngularVelocityBody*>(
               &_AngularVelocityBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(AngularVelocityBody& a, AngularVelocityBody& b) {
    a.Swap(&b);
  }
  inline void Swap(AngularVelocityBody* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AngularVelocityBody* New() const final {
    return CreateMaybeMessage<AngularVelocityBody>(nullptr);
  }

  AngularVelocityBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AngularVelocityBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AngularVelocityBody& from);
  void MergeFrom(const AngularVelocityBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AngularVelocityBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.AngularVelocityBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollRadSFieldNumber = 1,
    kPitchRadSFieldNumber = 2,
    kYawRadSFieldNumber = 3,
  };
  // float roll_rad_s = 1;
  void clear_roll_rad_s();
  float roll_rad_s() const;
  void set_roll_rad_s(float value);

  // float pitch_rad_s = 2;
  void clear_pitch_rad_s();
  float pitch_rad_s() const;
  void set_pitch_rad_s(float value);

  // float yaw_rad_s = 3;
  void clear_yaw_rad_s();
  float yaw_rad_s() const;
  void set_yaw_rad_s(float value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.AngularVelocityBody)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float roll_rad_s_;
  float pitch_rad_s_;
  float yaw_rad_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SpeedNed :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SpeedNed) */ {
 public:
  SpeedNed();
  virtual ~SpeedNed();

  SpeedNed(const SpeedNed& from);
  SpeedNed(SpeedNed&& from) noexcept
    : SpeedNed() {
    *this = ::std::move(from);
  }

  inline SpeedNed& operator=(const SpeedNed& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedNed& operator=(SpeedNed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeedNed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedNed* internal_default_instance() {
    return reinterpret_cast<const SpeedNed*>(
               &_SpeedNed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SpeedNed& a, SpeedNed& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedNed* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeedNed* New() const final {
    return CreateMaybeMessage<SpeedNed>(nullptr);
  }

  SpeedNed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeedNed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeedNed& from);
  void MergeFrom(const SpeedNed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedNed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SpeedNed";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityNorthMSFieldNumber = 1,
    kVelocityEastMSFieldNumber = 2,
    kVelocityDownMSFieldNumber = 3,
  };
  // float velocity_north_m_s = 1;
  void clear_velocity_north_m_s();
  float velocity_north_m_s() const;
  void set_velocity_north_m_s(float value);

  // float velocity_east_m_s = 2;
  void clear_velocity_east_m_s();
  float velocity_east_m_s() const;
  void set_velocity_east_m_s(float value);

  // float velocity_down_m_s = 3;
  void clear_velocity_down_m_s();
  float velocity_down_m_s() const;
  void set_velocity_down_m_s(float value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SpeedNed)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float velocity_north_m_s_;
  float velocity_east_m_s_;
  float velocity_down_m_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class GpsInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.GpsInfo) */ {
 public:
  GpsInfo();
  virtual ~GpsInfo();

  GpsInfo(const GpsInfo& from);
  GpsInfo(GpsInfo&& from) noexcept
    : GpsInfo() {
    *this = ::std::move(from);
  }

  inline GpsInfo& operator=(const GpsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GpsInfo& operator=(GpsInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GpsInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GpsInfo* internal_default_instance() {
    return reinterpret_cast<const GpsInfo*>(
               &_GpsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GpsInfo& a, GpsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GpsInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GpsInfo* New() const final {
    return CreateMaybeMessage<GpsInfo>(nullptr);
  }

  GpsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GpsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GpsInfo& from);
  void MergeFrom(const GpsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GpsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.GpsInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumSatellitesFieldNumber = 1,
    kFixTypeFieldNumber = 2,
  };
  // int32 num_satellites = 1;
  void clear_num_satellites();
  ::PROTOBUF_NAMESPACE_ID::int32 num_satellites() const;
  void set_num_satellites(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .mavsdk.rpc.telemetry.FixType fix_type = 2;
  void clear_fix_type();
  ::mavsdk::rpc::telemetry::FixType fix_type() const;
  void set_fix_type(::mavsdk::rpc::telemetry::FixType value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.GpsInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_satellites_;
  int fix_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class Battery :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.Battery) */ {
 public:
  Battery();
  virtual ~Battery();

  Battery(const Battery& from);
  Battery(Battery&& from) noexcept
    : Battery() {
    *this = ::std::move(from);
  }

  inline Battery& operator=(const Battery& from) {
    CopyFrom(from);
    return *this;
  }
  inline Battery& operator=(Battery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Battery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Battery* internal_default_instance() {
    return reinterpret_cast<const Battery*>(
               &_Battery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(Battery& a, Battery& b) {
    a.Swap(&b);
  }
  inline void Swap(Battery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Battery* New() const final {
    return CreateMaybeMessage<Battery>(nullptr);
  }

  Battery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Battery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Battery& from);
  void MergeFrom(const Battery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Battery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.Battery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoltageVFieldNumber = 1,
    kRemainingPercentFieldNumber = 2,
  };
  // float voltage_v = 1;
  void clear_voltage_v();
  float voltage_v() const;
  void set_voltage_v(float value);

  // float remaining_percent = 2;
  void clear_remaining_percent();
  float remaining_percent() const;
  void set_remaining_percent(float value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.Battery)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float voltage_v_;
  float remaining_percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class Health :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.Health) */ {
 public:
  Health();
  virtual ~Health();

  Health(const Health& from);
  Health(Health&& from) noexcept
    : Health() {
    *this = ::std::move(from);
  }

  inline Health& operator=(const Health& from) {
    CopyFrom(from);
    return *this;
  }
  inline Health& operator=(Health&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Health& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Health* internal_default_instance() {
    return reinterpret_cast<const Health*>(
               &_Health_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(Health& a, Health& b) {
    a.Swap(&b);
  }
  inline void Swap(Health* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Health* New() const final {
    return CreateMaybeMessage<Health>(nullptr);
  }

  Health* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Health>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Health& from);
  void MergeFrom(const Health& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Health* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.Health";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsGyrometerCalibrationOkFieldNumber = 1,
    kIsAccelerometerCalibrationOkFieldNumber = 2,
    kIsMagnetometerCalibrationOkFieldNumber = 3,
    kIsLevelCalibrationOkFieldNumber = 4,
    kIsLocalPositionOkFieldNumber = 5,
    kIsGlobalPositionOkFieldNumber = 6,
    kIsHomePositionOkFieldNumber = 7,
  };
  // bool is_gyrometer_calibration_ok = 1;
  void clear_is_gyrometer_calibration_ok();
  bool is_gyrometer_calibration_ok() const;
  void set_is_gyrometer_calibration_ok(bool value);

  // bool is_accelerometer_calibration_ok = 2;
  void clear_is_accelerometer_calibration_ok();
  bool is_accelerometer_calibration_ok() const;
  void set_is_accelerometer_calibration_ok(bool value);

  // bool is_magnetometer_calibration_ok = 3;
  void clear_is_magnetometer_calibration_ok();
  bool is_magnetometer_calibration_ok() const;
  void set_is_magnetometer_calibration_ok(bool value);

  // bool is_level_calibration_ok = 4;
  void clear_is_level_calibration_ok();
  bool is_level_calibration_ok() const;
  void set_is_level_calibration_ok(bool value);

  // bool is_local_position_ok = 5;
  void clear_is_local_position_ok();
  bool is_local_position_ok() const;
  void set_is_local_position_ok(bool value);

  // bool is_global_position_ok = 6;
  void clear_is_global_position_ok();
  bool is_global_position_ok() const;
  void set_is_global_position_ok(bool value);

  // bool is_home_position_ok = 7;
  void clear_is_home_position_ok();
  bool is_home_position_ok() const;
  void set_is_home_position_ok(bool value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.Health)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_gyrometer_calibration_ok_;
  bool is_accelerometer_calibration_ok_;
  bool is_magnetometer_calibration_ok_;
  bool is_level_calibration_ok_;
  bool is_local_position_ok_;
  bool is_global_position_ok_;
  bool is_home_position_ok_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class RcStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.RcStatus) */ {
 public:
  RcStatus();
  virtual ~RcStatus();

  RcStatus(const RcStatus& from);
  RcStatus(RcStatus&& from) noexcept
    : RcStatus() {
    *this = ::std::move(from);
  }

  inline RcStatus& operator=(const RcStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RcStatus& operator=(RcStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RcStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RcStatus* internal_default_instance() {
    return reinterpret_cast<const RcStatus*>(
               &_RcStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(RcStatus& a, RcStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RcStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RcStatus* New() const final {
    return CreateMaybeMessage<RcStatus>(nullptr);
  }

  RcStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RcStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RcStatus& from);
  void MergeFrom(const RcStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RcStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.RcStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWasAvailableOnceFieldNumber = 1,
    kIsAvailableFieldNumber = 2,
    kSignalStrengthPercentFieldNumber = 3,
  };
  // bool was_available_once = 1;
  void clear_was_available_once();
  bool was_available_once() const;
  void set_was_available_once(bool value);

  // bool is_available = 2;
  void clear_is_available();
  bool is_available() const;
  void set_is_available(bool value);

  // float signal_strength_percent = 3;
  void clear_signal_strength_percent();
  float signal_strength_percent() const;
  void set_signal_strength_percent(float value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.RcStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool was_available_once_;
  bool is_available_;
  float signal_strength_percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class StatusText :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.StatusText) */ {
 public:
  StatusText();
  virtual ~StatusText();

  StatusText(const StatusText& from);
  StatusText(StatusText&& from) noexcept
    : StatusText() {
    *this = ::std::move(from);
  }

  inline StatusText& operator=(const StatusText& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusText& operator=(StatusText&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusText& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusText* internal_default_instance() {
    return reinterpret_cast<const StatusText*>(
               &_StatusText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(StatusText& a, StatusText& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusText* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusText* New() const final {
    return CreateMaybeMessage<StatusText>(nullptr);
  }

  StatusText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusText>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusText& from);
  void MergeFrom(const StatusText& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusText* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.StatusText";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StatusText_StatusType StatusType;
  static constexpr StatusType INFO =
    StatusText_StatusType_INFO;
  static constexpr StatusType WARNING =
    StatusText_StatusType_WARNING;
  static constexpr StatusType CRITICAL =
    StatusText_StatusType_CRITICAL;
  static inline bool StatusType_IsValid(int value) {
    return StatusText_StatusType_IsValid(value);
  }
  static constexpr StatusType StatusType_MIN =
    StatusText_StatusType_StatusType_MIN;
  static constexpr StatusType StatusType_MAX =
    StatusText_StatusType_StatusType_MAX;
  static constexpr int StatusType_ARRAYSIZE =
    StatusText_StatusType_StatusType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StatusType_descriptor() {
    return StatusText_StatusType_descriptor();
  }
  template<typename T>
  static inline const std::string& StatusType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StatusType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StatusType_Name.");
    return StatusText_StatusType_Name(enum_t_value);
  }
  static inline bool StatusType_Parse(const std::string& name,
      StatusType* value) {
    return StatusText_StatusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // .mavsdk.rpc.telemetry.StatusText.StatusType type = 1;
  void clear_type();
  ::mavsdk::rpc::telemetry::StatusText_StatusType type() const;
  void set_type(::mavsdk::rpc::telemetry::StatusText_StatusType value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.StatusText)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class ActuatorControlTarget :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.ActuatorControlTarget) */ {
 public:
  ActuatorControlTarget();
  virtual ~ActuatorControlTarget();

  ActuatorControlTarget(const ActuatorControlTarget& from);
  ActuatorControlTarget(ActuatorControlTarget&& from) noexcept
    : ActuatorControlTarget() {
    *this = ::std::move(from);
  }

  inline ActuatorControlTarget& operator=(const ActuatorControlTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorControlTarget& operator=(ActuatorControlTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActuatorControlTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorControlTarget* internal_default_instance() {
    return reinterpret_cast<const ActuatorControlTarget*>(
               &_ActuatorControlTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ActuatorControlTarget& a, ActuatorControlTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorControlTarget* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActuatorControlTarget* New() const final {
    return CreateMaybeMessage<ActuatorControlTarget>(nullptr);
  }

  ActuatorControlTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActuatorControlTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActuatorControlTarget& from);
  void MergeFrom(const ActuatorControlTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorControlTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.ActuatorControlTarget";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlsFieldNumber = 2,
    kGroupFieldNumber = 1,
  };
  // repeated float controls = 2;
  int controls_size() const;
  void clear_controls();
  float controls(int index) const;
  void set_controls(int index, float value);
  void add_controls(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      controls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_controls();

  // int32 group = 1;
  void clear_group();
  ::PROTOBUF_NAMESPACE_ID::int32 group() const;
  void set_group(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.ActuatorControlTarget)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > controls_;
  mutable std::atomic<int> _controls_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class ActuatorOutputStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.ActuatorOutputStatus) */ {
 public:
  ActuatorOutputStatus();
  virtual ~ActuatorOutputStatus();

  ActuatorOutputStatus(const ActuatorOutputStatus& from);
  ActuatorOutputStatus(ActuatorOutputStatus&& from) noexcept
    : ActuatorOutputStatus() {
    *this = ::std::move(from);
  }

  inline ActuatorOutputStatus& operator=(const ActuatorOutputStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorOutputStatus& operator=(ActuatorOutputStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActuatorOutputStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActuatorOutputStatus* internal_default_instance() {
    return reinterpret_cast<const ActuatorOutputStatus*>(
               &_ActuatorOutputStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ActuatorOutputStatus& a, ActuatorOutputStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorOutputStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActuatorOutputStatus* New() const final {
    return CreateMaybeMessage<ActuatorOutputStatus>(nullptr);
  }

  ActuatorOutputStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActuatorOutputStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActuatorOutputStatus& from);
  void MergeFrom(const ActuatorOutputStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorOutputStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.ActuatorOutputStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActuatorFieldNumber = 2,
    kActiveFieldNumber = 1,
  };
  // repeated float actuator = 2;
  int actuator_size() const;
  void clear_actuator();
  float actuator(int index) const;
  void set_actuator(int index, float value);
  void add_actuator(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      actuator() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_actuator();

  // uint32 active = 1;
  void clear_active();
  ::PROTOBUF_NAMESPACE_ID::uint32 active() const;
  void set_active(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.ActuatorOutputStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > actuator_;
  mutable std::atomic<int> _actuator_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class Odometry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.Odometry) */ {
 public:
  Odometry();
  virtual ~Odometry();

  Odometry(const Odometry& from);
  Odometry(Odometry&& from) noexcept
    : Odometry() {
    *this = ::std::move(from);
  }

  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Odometry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
               &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(Odometry& a, Odometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Odometry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Odometry* New() const final {
    return CreateMaybeMessage<Odometry>(nullptr);
  }

  Odometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Odometry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Odometry& from);
  void MergeFrom(const Odometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Odometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.Odometry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Odometry_MavFrame MavFrame;
  static constexpr MavFrame UNDEF =
    Odometry_MavFrame_UNDEF;
  static constexpr MavFrame BODY_NED =
    Odometry_MavFrame_BODY_NED;
  static constexpr MavFrame VISION_NED =
    Odometry_MavFrame_VISION_NED;
  static constexpr MavFrame ESTIM_NED =
    Odometry_MavFrame_ESTIM_NED;
  static inline bool MavFrame_IsValid(int value) {
    return Odometry_MavFrame_IsValid(value);
  }
  static constexpr MavFrame MavFrame_MIN =
    Odometry_MavFrame_MavFrame_MIN;
  static constexpr MavFrame MavFrame_MAX =
    Odometry_MavFrame_MavFrame_MAX;
  static constexpr int MavFrame_ARRAYSIZE =
    Odometry_MavFrame_MavFrame_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MavFrame_descriptor() {
    return Odometry_MavFrame_descriptor();
  }
  template<typename T>
  static inline const std::string& MavFrame_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MavFrame>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MavFrame_Name.");
    return Odometry_MavFrame_Name(enum_t_value);
  }
  static inline bool MavFrame_Parse(const std::string& name,
      MavFrame* value) {
    return Odometry_MavFrame_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPositionBodyFieldNumber = 4,
    kQFieldNumber = 5,
    kSpeedBodyFieldNumber = 6,
    kAngularVelocityBodyFieldNumber = 7,
    kPoseCovarianceFieldNumber = 8,
    kVelocityCovarianceFieldNumber = 9,
    kTimeUsecFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kChildFrameIdFieldNumber = 3,
  };
  // .mavsdk.rpc.telemetry.PositionBody position_body = 4;
  bool has_position_body() const;
  private:
  bool _internal_has_position_body() const;
  public:
  void clear_position_body();
  const ::mavsdk::rpc::telemetry::PositionBody& position_body() const;
  ::mavsdk::rpc::telemetry::PositionBody* release_position_body();
  ::mavsdk::rpc::telemetry::PositionBody* mutable_position_body();
  void set_allocated_position_body(::mavsdk::rpc::telemetry::PositionBody* position_body);

  // .mavsdk.rpc.telemetry.Quaternion q = 5;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::mavsdk::rpc::telemetry::Quaternion& q() const;
  ::mavsdk::rpc::telemetry::Quaternion* release_q();
  ::mavsdk::rpc::telemetry::Quaternion* mutable_q();
  void set_allocated_q(::mavsdk::rpc::telemetry::Quaternion* q);

  // .mavsdk.rpc.telemetry.SpeedBody speed_body = 6;
  bool has_speed_body() const;
  private:
  bool _internal_has_speed_body() const;
  public:
  void clear_speed_body();
  const ::mavsdk::rpc::telemetry::SpeedBody& speed_body() const;
  ::mavsdk::rpc::telemetry::SpeedBody* release_speed_body();
  ::mavsdk::rpc::telemetry::SpeedBody* mutable_speed_body();
  void set_allocated_speed_body(::mavsdk::rpc::telemetry::SpeedBody* speed_body);

  // .mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;
  bool has_angular_velocity_body() const;
  private:
  bool _internal_has_angular_velocity_body() const;
  public:
  void clear_angular_velocity_body();
  const ::mavsdk::rpc::telemetry::AngularVelocityBody& angular_velocity_body() const;
  ::mavsdk::rpc::telemetry::AngularVelocityBody* release_angular_velocity_body();
  ::mavsdk::rpc::telemetry::AngularVelocityBody* mutable_angular_velocity_body();
  void set_allocated_angular_velocity_body(::mavsdk::rpc::telemetry::AngularVelocityBody* angular_velocity_body);

  // .mavsdk.rpc.telemetry.Covariance pose_covariance = 8;
  bool has_pose_covariance() const;
  private:
  bool _internal_has_pose_covariance() const;
  public:
  void clear_pose_covariance();
  const ::mavsdk::rpc::telemetry::Covariance& pose_covariance() const;
  ::mavsdk::rpc::telemetry::Covariance* release_pose_covariance();
  ::mavsdk::rpc::telemetry::Covariance* mutable_pose_covariance();
  void set_allocated_pose_covariance(::mavsdk::rpc::telemetry::Covariance* pose_covariance);

  // .mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;
  bool has_velocity_covariance() const;
  private:
  bool _internal_has_velocity_covariance() const;
  public:
  void clear_velocity_covariance();
  const ::mavsdk::rpc::telemetry::Covariance& velocity_covariance() const;
  ::mavsdk::rpc::telemetry::Covariance* release_velocity_covariance();
  ::mavsdk::rpc::telemetry::Covariance* mutable_velocity_covariance();
  void set_allocated_velocity_covariance(::mavsdk::rpc::telemetry::Covariance* velocity_covariance);

  // uint64 time_usec = 1;
  void clear_time_usec();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_usec() const;
  void set_time_usec(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .mavsdk.rpc.telemetry.Odometry.MavFrame frame_id = 2;
  void clear_frame_id();
  ::mavsdk::rpc::telemetry::Odometry_MavFrame frame_id() const;
  void set_frame_id(::mavsdk::rpc::telemetry::Odometry_MavFrame value);

  // .mavsdk.rpc.telemetry.Odometry.MavFrame child_frame_id = 3;
  void clear_child_frame_id();
  ::mavsdk::rpc::telemetry::Odometry_MavFrame child_frame_id() const;
  void set_child_frame_id(::mavsdk::rpc::telemetry::Odometry_MavFrame value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.Odometry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::telemetry::PositionBody* position_body_;
  ::mavsdk::rpc::telemetry::Quaternion* q_;
  ::mavsdk::rpc::telemetry::SpeedBody* speed_body_;
  ::mavsdk::rpc::telemetry::AngularVelocityBody* angular_velocity_body_;
  ::mavsdk::rpc::telemetry::Covariance* pose_covariance_;
  ::mavsdk::rpc::telemetry::Covariance* velocity_covariance_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_usec_;
  int frame_id_;
  int child_frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class Covariance :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.Covariance) */ {
 public:
  Covariance();
  virtual ~Covariance();

  Covariance(const Covariance& from);
  Covariance(Covariance&& from) noexcept
    : Covariance() {
    *this = ::std::move(from);
  }

  inline Covariance& operator=(const Covariance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Covariance& operator=(Covariance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Covariance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Covariance* internal_default_instance() {
    return reinterpret_cast<const Covariance*>(
               &_Covariance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(Covariance& a, Covariance& b) {
    a.Swap(&b);
  }
  inline void Swap(Covariance* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Covariance* New() const final {
    return CreateMaybeMessage<Covariance>(nullptr);
  }

  Covariance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Covariance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Covariance& from);
  void MergeFrom(const Covariance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Covariance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.Covariance";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceMatrixFieldNumber = 1,
  };
  // repeated float covariance_matrix = 1;
  int covariance_matrix_size() const;
  void clear_covariance_matrix();
  float covariance_matrix(int index) const;
  void set_covariance_matrix(int index, float value);
  void add_covariance_matrix(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      covariance_matrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_covariance_matrix();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.Covariance)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > covariance_matrix_;
  mutable std::atomic<int> _covariance_matrix_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class SpeedBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.SpeedBody) */ {
 public:
  SpeedBody();
  virtual ~SpeedBody();

  SpeedBody(const SpeedBody& from);
  SpeedBody(SpeedBody&& from) noexcept
    : SpeedBody() {
    *this = ::std::move(from);
  }

  inline SpeedBody& operator=(const SpeedBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedBody& operator=(SpeedBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeedBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedBody* internal_default_instance() {
    return reinterpret_cast<const SpeedBody*>(
               &_SpeedBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(SpeedBody& a, SpeedBody& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedBody* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeedBody* New() const final {
    return CreateMaybeMessage<SpeedBody>(nullptr);
  }

  SpeedBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeedBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeedBody& from);
  void MergeFrom(const SpeedBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.SpeedBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityXMSFieldNumber = 1,
    kVelocityYMSFieldNumber = 2,
    kVelocityZMSFieldNumber = 3,
  };
  // float velocity_x_m_s = 1;
  void clear_velocity_x_m_s();
  float velocity_x_m_s() const;
  void set_velocity_x_m_s(float value);

  // float velocity_y_m_s = 2;
  void clear_velocity_y_m_s();
  float velocity_y_m_s() const;
  void set_velocity_y_m_s(float value);

  // float velocity_z_m_s = 3;
  void clear_velocity_z_m_s();
  float velocity_z_m_s() const;
  void set_velocity_z_m_s(float value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.SpeedBody)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float velocity_x_m_s_;
  float velocity_y_m_s_;
  float velocity_z_m_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class PositionBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.telemetry.PositionBody) */ {
 public:
  PositionBody();
  virtual ~PositionBody();

  PositionBody(const PositionBody& from);
  PositionBody(PositionBody&& from) noexcept
    : PositionBody() {
    *this = ::std::move(from);
  }

  inline PositionBody& operator=(const PositionBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionBody& operator=(PositionBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionBody* internal_default_instance() {
    return reinterpret_cast<const PositionBody*>(
               &_PositionBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(PositionBody& a, PositionBody& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionBody* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionBody* New() const final {
    return CreateMaybeMessage<PositionBody>(nullptr);
  }

  PositionBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionBody& from);
  void MergeFrom(const PositionBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.telemetry.PositionBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_telemetry_2ftelemetry_2eproto);
    return ::descriptor_table_telemetry_2ftelemetry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXMFieldNumber = 1,
    kYMFieldNumber = 2,
    kZMFieldNumber = 3,
  };
  // float x_m = 1;
  void clear_x_m();
  float x_m() const;
  void set_x_m(float value);

  // float y_m = 2;
  void clear_y_m();
  float y_m() const;
  void set_y_m(float value);

  // float z_m = 3;
  void clear_z_m();
  float z_m() const;
  void set_z_m(float value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.telemetry.PositionBody)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_m_;
  float y_m_;
  float z_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_telemetry_2ftelemetry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubscribePositionRequest

// -------------------------------------------------------------------

// PositionResponse

// .mavsdk.rpc.telemetry.Position position = 1;
inline bool PositionResponse::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void PositionResponse::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Position& PositionResponse::position() const {
  const ::mavsdk::rpc::telemetry::Position* p = position_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.PositionResponse.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::Position*>(
      &::mavsdk::rpc::telemetry::_Position_default_instance_);
}
inline ::mavsdk::rpc::telemetry::Position* PositionResponse::release_position() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.PositionResponse.position)
  
  ::mavsdk::rpc::telemetry::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Position* PositionResponse::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.PositionResponse.position)
  return position_;
}
inline void PositionResponse::set_allocated_position(::mavsdk::rpc::telemetry::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.PositionResponse.position)
}

// -------------------------------------------------------------------

// SubscribeHomeRequest

// -------------------------------------------------------------------

// HomeResponse

// .mavsdk.rpc.telemetry.Position home = 1;
inline bool HomeResponse::has_home() const {
  return this != internal_default_instance() && home_ != nullptr;
}
inline void HomeResponse::clear_home() {
  if (GetArenaNoVirtual() == nullptr && home_ != nullptr) {
    delete home_;
  }
  home_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Position& HomeResponse::home() const {
  const ::mavsdk::rpc::telemetry::Position* p = home_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.HomeResponse.home)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::Position*>(
      &::mavsdk::rpc::telemetry::_Position_default_instance_);
}
inline ::mavsdk::rpc::telemetry::Position* HomeResponse::release_home() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.HomeResponse.home)
  
  ::mavsdk::rpc::telemetry::Position* temp = home_;
  home_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Position* HomeResponse::mutable_home() {
  
  if (home_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Position>(GetArenaNoVirtual());
    home_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.HomeResponse.home)
  return home_;
}
inline void HomeResponse::set_allocated_home(::mavsdk::rpc::telemetry::Position* home) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete home_;
  }
  if (home) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      home = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, home, submessage_arena);
    }
    
  } else {
    
  }
  home_ = home;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.HomeResponse.home)
}

// -------------------------------------------------------------------

// SubscribeInAirRequest

// -------------------------------------------------------------------

// InAirResponse

// bool is_in_air = 1;
inline void InAirResponse::clear_is_in_air() {
  is_in_air_ = false;
}
inline bool InAirResponse::is_in_air() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.InAirResponse.is_in_air)
  return is_in_air_;
}
inline void InAirResponse::set_is_in_air(bool value) {
  
  is_in_air_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.InAirResponse.is_in_air)
}

// -------------------------------------------------------------------

// SubscribeLandedStateRequest

// -------------------------------------------------------------------

// LandedStateResponse

// .mavsdk.rpc.telemetry.LandedState landed_state = 1;
inline void LandedStateResponse::clear_landed_state() {
  landed_state_ = 0;
}
inline ::mavsdk::rpc::telemetry::LandedState LandedStateResponse::landed_state() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.LandedStateResponse.landed_state)
  return static_cast< ::mavsdk::rpc::telemetry::LandedState >(landed_state_);
}
inline void LandedStateResponse::set_landed_state(::mavsdk::rpc::telemetry::LandedState value) {
  
  landed_state_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.LandedStateResponse.landed_state)
}

// -------------------------------------------------------------------

// SubscribeArmedRequest

// -------------------------------------------------------------------

// ArmedResponse

// bool is_armed = 1;
inline void ArmedResponse::clear_is_armed() {
  is_armed_ = false;
}
inline bool ArmedResponse::is_armed() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ArmedResponse.is_armed)
  return is_armed_;
}
inline void ArmedResponse::set_is_armed(bool value) {
  
  is_armed_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.ArmedResponse.is_armed)
}

// -------------------------------------------------------------------

// SubscribeAttitudeQuaternionRequest

// -------------------------------------------------------------------

// AttitudeQuaternionResponse

// .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
inline bool AttitudeQuaternionResponse::has_attitude_quaternion() const {
  return this != internal_default_instance() && attitude_quaternion_ != nullptr;
}
inline void AttitudeQuaternionResponse::clear_attitude_quaternion() {
  if (GetArenaNoVirtual() == nullptr && attitude_quaternion_ != nullptr) {
    delete attitude_quaternion_;
  }
  attitude_quaternion_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Quaternion& AttitudeQuaternionResponse::attitude_quaternion() const {
  const ::mavsdk::rpc::telemetry::Quaternion* p = attitude_quaternion_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AttitudeQuaternionResponse.attitude_quaternion)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::Quaternion*>(
      &::mavsdk::rpc::telemetry::_Quaternion_default_instance_);
}
inline ::mavsdk::rpc::telemetry::Quaternion* AttitudeQuaternionResponse::release_attitude_quaternion() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.AttitudeQuaternionResponse.attitude_quaternion)
  
  ::mavsdk::rpc::telemetry::Quaternion* temp = attitude_quaternion_;
  attitude_quaternion_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Quaternion* AttitudeQuaternionResponse::mutable_attitude_quaternion() {
  
  if (attitude_quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Quaternion>(GetArenaNoVirtual());
    attitude_quaternion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.AttitudeQuaternionResponse.attitude_quaternion)
  return attitude_quaternion_;
}
inline void AttitudeQuaternionResponse::set_allocated_attitude_quaternion(::mavsdk::rpc::telemetry::Quaternion* attitude_quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attitude_quaternion_;
  }
  if (attitude_quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attitude_quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_quaternion, submessage_arena);
    }
    
  } else {
    
  }
  attitude_quaternion_ = attitude_quaternion;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.AttitudeQuaternionResponse.attitude_quaternion)
}

// -------------------------------------------------------------------

// SubscribeAttitudeEulerRequest

// -------------------------------------------------------------------

// AttitudeEulerResponse

// .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
inline bool AttitudeEulerResponse::has_attitude_euler() const {
  return this != internal_default_instance() && attitude_euler_ != nullptr;
}
inline void AttitudeEulerResponse::clear_attitude_euler() {
  if (GetArenaNoVirtual() == nullptr && attitude_euler_ != nullptr) {
    delete attitude_euler_;
  }
  attitude_euler_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::EulerAngle& AttitudeEulerResponse::attitude_euler() const {
  const ::mavsdk::rpc::telemetry::EulerAngle* p = attitude_euler_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AttitudeEulerResponse.attitude_euler)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::EulerAngle*>(
      &::mavsdk::rpc::telemetry::_EulerAngle_default_instance_);
}
inline ::mavsdk::rpc::telemetry::EulerAngle* AttitudeEulerResponse::release_attitude_euler() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.AttitudeEulerResponse.attitude_euler)
  
  ::mavsdk::rpc::telemetry::EulerAngle* temp = attitude_euler_;
  attitude_euler_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::EulerAngle* AttitudeEulerResponse::mutable_attitude_euler() {
  
  if (attitude_euler_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::EulerAngle>(GetArenaNoVirtual());
    attitude_euler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.AttitudeEulerResponse.attitude_euler)
  return attitude_euler_;
}
inline void AttitudeEulerResponse::set_allocated_attitude_euler(::mavsdk::rpc::telemetry::EulerAngle* attitude_euler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attitude_euler_;
  }
  if (attitude_euler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attitude_euler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_euler, submessage_arena);
    }
    
  } else {
    
  }
  attitude_euler_ = attitude_euler;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.AttitudeEulerResponse.attitude_euler)
}

// -------------------------------------------------------------------

// SubscribeAttitudeAngularVelocityBodyRequest

// -------------------------------------------------------------------

// AttitudeAngularVelocityBodyResponse

// .mavsdk.rpc.telemetry.AngularVelocityBody attitude_angular_velocity_body = 1;
inline bool AttitudeAngularVelocityBodyResponse::has_attitude_angular_velocity_body() const {
  return this != internal_default_instance() && attitude_angular_velocity_body_ != nullptr;
}
inline void AttitudeAngularVelocityBodyResponse::clear_attitude_angular_velocity_body() {
  if (GetArenaNoVirtual() == nullptr && attitude_angular_velocity_body_ != nullptr) {
    delete attitude_angular_velocity_body_;
  }
  attitude_angular_velocity_body_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::AngularVelocityBody& AttitudeAngularVelocityBodyResponse::attitude_angular_velocity_body() const {
  const ::mavsdk::rpc::telemetry::AngularVelocityBody* p = attitude_angular_velocity_body_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse.attitude_angular_velocity_body)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::AngularVelocityBody*>(
      &::mavsdk::rpc::telemetry::_AngularVelocityBody_default_instance_);
}
inline ::mavsdk::rpc::telemetry::AngularVelocityBody* AttitudeAngularVelocityBodyResponse::release_attitude_angular_velocity_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse.attitude_angular_velocity_body)
  
  ::mavsdk::rpc::telemetry::AngularVelocityBody* temp = attitude_angular_velocity_body_;
  attitude_angular_velocity_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::AngularVelocityBody* AttitudeAngularVelocityBodyResponse::mutable_attitude_angular_velocity_body() {
  
  if (attitude_angular_velocity_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::AngularVelocityBody>(GetArenaNoVirtual());
    attitude_angular_velocity_body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse.attitude_angular_velocity_body)
  return attitude_angular_velocity_body_;
}
inline void AttitudeAngularVelocityBodyResponse::set_allocated_attitude_angular_velocity_body(::mavsdk::rpc::telemetry::AngularVelocityBody* attitude_angular_velocity_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attitude_angular_velocity_body_;
  }
  if (attitude_angular_velocity_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attitude_angular_velocity_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_angular_velocity_body, submessage_arena);
    }
    
  } else {
    
  }
  attitude_angular_velocity_body_ = attitude_angular_velocity_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.AttitudeAngularVelocityBodyResponse.attitude_angular_velocity_body)
}

// -------------------------------------------------------------------

// SubscribeCameraAttitudeQuaternionRequest

// -------------------------------------------------------------------

// CameraAttitudeQuaternionResponse

// .mavsdk.rpc.telemetry.Quaternion attitude_quaternion = 1;
inline bool CameraAttitudeQuaternionResponse::has_attitude_quaternion() const {
  return this != internal_default_instance() && attitude_quaternion_ != nullptr;
}
inline void CameraAttitudeQuaternionResponse::clear_attitude_quaternion() {
  if (GetArenaNoVirtual() == nullptr && attitude_quaternion_ != nullptr) {
    delete attitude_quaternion_;
  }
  attitude_quaternion_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Quaternion& CameraAttitudeQuaternionResponse::attitude_quaternion() const {
  const ::mavsdk::rpc::telemetry::Quaternion* p = attitude_quaternion_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse.attitude_quaternion)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::Quaternion*>(
      &::mavsdk::rpc::telemetry::_Quaternion_default_instance_);
}
inline ::mavsdk::rpc::telemetry::Quaternion* CameraAttitudeQuaternionResponse::release_attitude_quaternion() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse.attitude_quaternion)
  
  ::mavsdk::rpc::telemetry::Quaternion* temp = attitude_quaternion_;
  attitude_quaternion_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Quaternion* CameraAttitudeQuaternionResponse::mutable_attitude_quaternion() {
  
  if (attitude_quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Quaternion>(GetArenaNoVirtual());
    attitude_quaternion_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse.attitude_quaternion)
  return attitude_quaternion_;
}
inline void CameraAttitudeQuaternionResponse::set_allocated_attitude_quaternion(::mavsdk::rpc::telemetry::Quaternion* attitude_quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attitude_quaternion_;
  }
  if (attitude_quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attitude_quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_quaternion, submessage_arena);
    }
    
  } else {
    
  }
  attitude_quaternion_ = attitude_quaternion;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.CameraAttitudeQuaternionResponse.attitude_quaternion)
}

// -------------------------------------------------------------------

// SubscribeCameraAttitudeEulerRequest

// -------------------------------------------------------------------

// CameraAttitudeEulerResponse

// .mavsdk.rpc.telemetry.EulerAngle attitude_euler = 1;
inline bool CameraAttitudeEulerResponse::has_attitude_euler() const {
  return this != internal_default_instance() && attitude_euler_ != nullptr;
}
inline void CameraAttitudeEulerResponse::clear_attitude_euler() {
  if (GetArenaNoVirtual() == nullptr && attitude_euler_ != nullptr) {
    delete attitude_euler_;
  }
  attitude_euler_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::EulerAngle& CameraAttitudeEulerResponse::attitude_euler() const {
  const ::mavsdk::rpc::telemetry::EulerAngle* p = attitude_euler_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse.attitude_euler)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::EulerAngle*>(
      &::mavsdk::rpc::telemetry::_EulerAngle_default_instance_);
}
inline ::mavsdk::rpc::telemetry::EulerAngle* CameraAttitudeEulerResponse::release_attitude_euler() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse.attitude_euler)
  
  ::mavsdk::rpc::telemetry::EulerAngle* temp = attitude_euler_;
  attitude_euler_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::EulerAngle* CameraAttitudeEulerResponse::mutable_attitude_euler() {
  
  if (attitude_euler_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::EulerAngle>(GetArenaNoVirtual());
    attitude_euler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse.attitude_euler)
  return attitude_euler_;
}
inline void CameraAttitudeEulerResponse::set_allocated_attitude_euler(::mavsdk::rpc::telemetry::EulerAngle* attitude_euler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete attitude_euler_;
  }
  if (attitude_euler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attitude_euler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attitude_euler, submessage_arena);
    }
    
  } else {
    
  }
  attitude_euler_ = attitude_euler;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.CameraAttitudeEulerResponse.attitude_euler)
}

// -------------------------------------------------------------------

// SubscribeGroundSpeedNedRequest

// -------------------------------------------------------------------

// GroundSpeedNedResponse

// .mavsdk.rpc.telemetry.SpeedNed ground_speed_ned = 1;
inline bool GroundSpeedNedResponse::has_ground_speed_ned() const {
  return this != internal_default_instance() && ground_speed_ned_ != nullptr;
}
inline void GroundSpeedNedResponse::clear_ground_speed_ned() {
  if (GetArenaNoVirtual() == nullptr && ground_speed_ned_ != nullptr) {
    delete ground_speed_ned_;
  }
  ground_speed_ned_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::SpeedNed& GroundSpeedNedResponse::ground_speed_ned() const {
  const ::mavsdk::rpc::telemetry::SpeedNed* p = ground_speed_ned_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.GroundSpeedNedResponse.ground_speed_ned)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::SpeedNed*>(
      &::mavsdk::rpc::telemetry::_SpeedNed_default_instance_);
}
inline ::mavsdk::rpc::telemetry::SpeedNed* GroundSpeedNedResponse::release_ground_speed_ned() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.GroundSpeedNedResponse.ground_speed_ned)
  
  ::mavsdk::rpc::telemetry::SpeedNed* temp = ground_speed_ned_;
  ground_speed_ned_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::SpeedNed* GroundSpeedNedResponse::mutable_ground_speed_ned() {
  
  if (ground_speed_ned_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::SpeedNed>(GetArenaNoVirtual());
    ground_speed_ned_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.GroundSpeedNedResponse.ground_speed_ned)
  return ground_speed_ned_;
}
inline void GroundSpeedNedResponse::set_allocated_ground_speed_ned(::mavsdk::rpc::telemetry::SpeedNed* ground_speed_ned) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ground_speed_ned_;
  }
  if (ground_speed_ned) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ground_speed_ned = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ground_speed_ned, submessage_arena);
    }
    
  } else {
    
  }
  ground_speed_ned_ = ground_speed_ned;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.GroundSpeedNedResponse.ground_speed_ned)
}

// -------------------------------------------------------------------

// SubscribeGpsInfoRequest

// -------------------------------------------------------------------

// GpsInfoResponse

// .mavsdk.rpc.telemetry.GpsInfo gps_info = 1;
inline bool GpsInfoResponse::has_gps_info() const {
  return this != internal_default_instance() && gps_info_ != nullptr;
}
inline void GpsInfoResponse::clear_gps_info() {
  if (GetArenaNoVirtual() == nullptr && gps_info_ != nullptr) {
    delete gps_info_;
  }
  gps_info_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::GpsInfo& GpsInfoResponse::gps_info() const {
  const ::mavsdk::rpc::telemetry::GpsInfo* p = gps_info_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.GpsInfoResponse.gps_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::GpsInfo*>(
      &::mavsdk::rpc::telemetry::_GpsInfo_default_instance_);
}
inline ::mavsdk::rpc::telemetry::GpsInfo* GpsInfoResponse::release_gps_info() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.GpsInfoResponse.gps_info)
  
  ::mavsdk::rpc::telemetry::GpsInfo* temp = gps_info_;
  gps_info_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::GpsInfo* GpsInfoResponse::mutable_gps_info() {
  
  if (gps_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::GpsInfo>(GetArenaNoVirtual());
    gps_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.GpsInfoResponse.gps_info)
  return gps_info_;
}
inline void GpsInfoResponse::set_allocated_gps_info(::mavsdk::rpc::telemetry::GpsInfo* gps_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gps_info_;
  }
  if (gps_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gps_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps_info, submessage_arena);
    }
    
  } else {
    
  }
  gps_info_ = gps_info;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.GpsInfoResponse.gps_info)
}

// -------------------------------------------------------------------

// SubscribeBatteryRequest

// -------------------------------------------------------------------

// BatteryResponse

// .mavsdk.rpc.telemetry.Battery battery = 1;
inline bool BatteryResponse::has_battery() const {
  return this != internal_default_instance() && battery_ != nullptr;
}
inline void BatteryResponse::clear_battery() {
  if (GetArenaNoVirtual() == nullptr && battery_ != nullptr) {
    delete battery_;
  }
  battery_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Battery& BatteryResponse::battery() const {
  const ::mavsdk::rpc::telemetry::Battery* p = battery_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.BatteryResponse.battery)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::Battery*>(
      &::mavsdk::rpc::telemetry::_Battery_default_instance_);
}
inline ::mavsdk::rpc::telemetry::Battery* BatteryResponse::release_battery() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.BatteryResponse.battery)
  
  ::mavsdk::rpc::telemetry::Battery* temp = battery_;
  battery_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Battery* BatteryResponse::mutable_battery() {
  
  if (battery_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Battery>(GetArenaNoVirtual());
    battery_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.BatteryResponse.battery)
  return battery_;
}
inline void BatteryResponse::set_allocated_battery(::mavsdk::rpc::telemetry::Battery* battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete battery_;
  }
  if (battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery, submessage_arena);
    }
    
  } else {
    
  }
  battery_ = battery;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.BatteryResponse.battery)
}

// -------------------------------------------------------------------

// SubscribeFlightModeRequest

// -------------------------------------------------------------------

// FlightModeResponse

// .mavsdk.rpc.telemetry.FlightMode flight_mode = 1;
inline void FlightModeResponse::clear_flight_mode() {
  flight_mode_ = 0;
}
inline ::mavsdk::rpc::telemetry::FlightMode FlightModeResponse::flight_mode() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.FlightModeResponse.flight_mode)
  return static_cast< ::mavsdk::rpc::telemetry::FlightMode >(flight_mode_);
}
inline void FlightModeResponse::set_flight_mode(::mavsdk::rpc::telemetry::FlightMode value) {
  
  flight_mode_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.FlightModeResponse.flight_mode)
}

// -------------------------------------------------------------------

// SubscribeHealthRequest

// -------------------------------------------------------------------

// HealthResponse

// .mavsdk.rpc.telemetry.Health health = 1;
inline bool HealthResponse::has_health() const {
  return this != internal_default_instance() && health_ != nullptr;
}
inline void HealthResponse::clear_health() {
  if (GetArenaNoVirtual() == nullptr && health_ != nullptr) {
    delete health_;
  }
  health_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Health& HealthResponse::health() const {
  const ::mavsdk::rpc::telemetry::Health* p = health_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.HealthResponse.health)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::Health*>(
      &::mavsdk::rpc::telemetry::_Health_default_instance_);
}
inline ::mavsdk::rpc::telemetry::Health* HealthResponse::release_health() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.HealthResponse.health)
  
  ::mavsdk::rpc::telemetry::Health* temp = health_;
  health_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Health* HealthResponse::mutable_health() {
  
  if (health_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Health>(GetArenaNoVirtual());
    health_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.HealthResponse.health)
  return health_;
}
inline void HealthResponse::set_allocated_health(::mavsdk::rpc::telemetry::Health* health) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete health_;
  }
  if (health) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      health = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, health, submessage_arena);
    }
    
  } else {
    
  }
  health_ = health;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.HealthResponse.health)
}

// -------------------------------------------------------------------

// SubscribeRcStatusRequest

// -------------------------------------------------------------------

// RcStatusResponse

// .mavsdk.rpc.telemetry.RcStatus rc_status = 1;
inline bool RcStatusResponse::has_rc_status() const {
  return this != internal_default_instance() && rc_status_ != nullptr;
}
inline void RcStatusResponse::clear_rc_status() {
  if (GetArenaNoVirtual() == nullptr && rc_status_ != nullptr) {
    delete rc_status_;
  }
  rc_status_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::RcStatus& RcStatusResponse::rc_status() const {
  const ::mavsdk::rpc::telemetry::RcStatus* p = rc_status_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RcStatusResponse.rc_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::RcStatus*>(
      &::mavsdk::rpc::telemetry::_RcStatus_default_instance_);
}
inline ::mavsdk::rpc::telemetry::RcStatus* RcStatusResponse::release_rc_status() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.RcStatusResponse.rc_status)
  
  ::mavsdk::rpc::telemetry::RcStatus* temp = rc_status_;
  rc_status_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::RcStatus* RcStatusResponse::mutable_rc_status() {
  
  if (rc_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::RcStatus>(GetArenaNoVirtual());
    rc_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.RcStatusResponse.rc_status)
  return rc_status_;
}
inline void RcStatusResponse::set_allocated_rc_status(::mavsdk::rpc::telemetry::RcStatus* rc_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rc_status_;
  }
  if (rc_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rc_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rc_status, submessage_arena);
    }
    
  } else {
    
  }
  rc_status_ = rc_status;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.RcStatusResponse.rc_status)
}

// -------------------------------------------------------------------

// SubscribeStatusTextRequest

// -------------------------------------------------------------------

// StatusTextResponse

// .mavsdk.rpc.telemetry.StatusText status_text = 1;
inline bool StatusTextResponse::has_status_text() const {
  return this != internal_default_instance() && status_text_ != nullptr;
}
inline void StatusTextResponse::clear_status_text() {
  if (GetArenaNoVirtual() == nullptr && status_text_ != nullptr) {
    delete status_text_;
  }
  status_text_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::StatusText& StatusTextResponse::status_text() const {
  const ::mavsdk::rpc::telemetry::StatusText* p = status_text_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.StatusTextResponse.status_text)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::StatusText*>(
      &::mavsdk::rpc::telemetry::_StatusText_default_instance_);
}
inline ::mavsdk::rpc::telemetry::StatusText* StatusTextResponse::release_status_text() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.StatusTextResponse.status_text)
  
  ::mavsdk::rpc::telemetry::StatusText* temp = status_text_;
  status_text_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::StatusText* StatusTextResponse::mutable_status_text() {
  
  if (status_text_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::StatusText>(GetArenaNoVirtual());
    status_text_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.StatusTextResponse.status_text)
  return status_text_;
}
inline void StatusTextResponse::set_allocated_status_text(::mavsdk::rpc::telemetry::StatusText* status_text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_text_;
  }
  if (status_text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status_text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status_text, submessage_arena);
    }
    
  } else {
    
  }
  status_text_ = status_text;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.StatusTextResponse.status_text)
}

// -------------------------------------------------------------------

// SubscribeActuatorControlTargetRequest

// -------------------------------------------------------------------

// ActuatorControlTargetResponse

// .mavsdk.rpc.telemetry.ActuatorControlTarget actuator_control_target = 1;
inline bool ActuatorControlTargetResponse::has_actuator_control_target() const {
  return this != internal_default_instance() && actuator_control_target_ != nullptr;
}
inline void ActuatorControlTargetResponse::clear_actuator_control_target() {
  if (GetArenaNoVirtual() == nullptr && actuator_control_target_ != nullptr) {
    delete actuator_control_target_;
  }
  actuator_control_target_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::ActuatorControlTarget& ActuatorControlTargetResponse::actuator_control_target() const {
  const ::mavsdk::rpc::telemetry::ActuatorControlTarget* p = actuator_control_target_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ActuatorControlTargetResponse.actuator_control_target)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::ActuatorControlTarget*>(
      &::mavsdk::rpc::telemetry::_ActuatorControlTarget_default_instance_);
}
inline ::mavsdk::rpc::telemetry::ActuatorControlTarget* ActuatorControlTargetResponse::release_actuator_control_target() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.ActuatorControlTargetResponse.actuator_control_target)
  
  ::mavsdk::rpc::telemetry::ActuatorControlTarget* temp = actuator_control_target_;
  actuator_control_target_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::ActuatorControlTarget* ActuatorControlTargetResponse::mutable_actuator_control_target() {
  
  if (actuator_control_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::ActuatorControlTarget>(GetArenaNoVirtual());
    actuator_control_target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.ActuatorControlTargetResponse.actuator_control_target)
  return actuator_control_target_;
}
inline void ActuatorControlTargetResponse::set_allocated_actuator_control_target(::mavsdk::rpc::telemetry::ActuatorControlTarget* actuator_control_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete actuator_control_target_;
  }
  if (actuator_control_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      actuator_control_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actuator_control_target, submessage_arena);
    }
    
  } else {
    
  }
  actuator_control_target_ = actuator_control_target;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.ActuatorControlTargetResponse.actuator_control_target)
}

// -------------------------------------------------------------------

// SubscribeActuatorOutputStatusRequest

// -------------------------------------------------------------------

// ActuatorOutputStatusResponse

// .mavsdk.rpc.telemetry.ActuatorOutputStatus actuator_output_status = 1;
inline bool ActuatorOutputStatusResponse::has_actuator_output_status() const {
  return this != internal_default_instance() && actuator_output_status_ != nullptr;
}
inline void ActuatorOutputStatusResponse::clear_actuator_output_status() {
  if (GetArenaNoVirtual() == nullptr && actuator_output_status_ != nullptr) {
    delete actuator_output_status_;
  }
  actuator_output_status_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::ActuatorOutputStatus& ActuatorOutputStatusResponse::actuator_output_status() const {
  const ::mavsdk::rpc::telemetry::ActuatorOutputStatus* p = actuator_output_status_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse.actuator_output_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::ActuatorOutputStatus*>(
      &::mavsdk::rpc::telemetry::_ActuatorOutputStatus_default_instance_);
}
inline ::mavsdk::rpc::telemetry::ActuatorOutputStatus* ActuatorOutputStatusResponse::release_actuator_output_status() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse.actuator_output_status)
  
  ::mavsdk::rpc::telemetry::ActuatorOutputStatus* temp = actuator_output_status_;
  actuator_output_status_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::ActuatorOutputStatus* ActuatorOutputStatusResponse::mutable_actuator_output_status() {
  
  if (actuator_output_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::ActuatorOutputStatus>(GetArenaNoVirtual());
    actuator_output_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse.actuator_output_status)
  return actuator_output_status_;
}
inline void ActuatorOutputStatusResponse::set_allocated_actuator_output_status(::mavsdk::rpc::telemetry::ActuatorOutputStatus* actuator_output_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete actuator_output_status_;
  }
  if (actuator_output_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      actuator_output_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actuator_output_status, submessage_arena);
    }
    
  } else {
    
  }
  actuator_output_status_ = actuator_output_status;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.ActuatorOutputStatusResponse.actuator_output_status)
}

// -------------------------------------------------------------------

// SubscribeOdometryRequest

// -------------------------------------------------------------------

// OdometryResponse

// .mavsdk.rpc.telemetry.Odometry odometry = 1;
inline bool OdometryResponse::has_odometry() const {
  return this != internal_default_instance() && odometry_ != nullptr;
}
inline void OdometryResponse::clear_odometry() {
  if (GetArenaNoVirtual() == nullptr && odometry_ != nullptr) {
    delete odometry_;
  }
  odometry_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Odometry& OdometryResponse::odometry() const {
  const ::mavsdk::rpc::telemetry::Odometry* p = odometry_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.OdometryResponse.odometry)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::Odometry*>(
      &::mavsdk::rpc::telemetry::_Odometry_default_instance_);
}
inline ::mavsdk::rpc::telemetry::Odometry* OdometryResponse::release_odometry() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.OdometryResponse.odometry)
  
  ::mavsdk::rpc::telemetry::Odometry* temp = odometry_;
  odometry_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Odometry* OdometryResponse::mutable_odometry() {
  
  if (odometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Odometry>(GetArenaNoVirtual());
    odometry_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.OdometryResponse.odometry)
  return odometry_;
}
inline void OdometryResponse::set_allocated_odometry(::mavsdk::rpc::telemetry::Odometry* odometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete odometry_;
  }
  if (odometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      odometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odometry, submessage_arena);
    }
    
  } else {
    
  }
  odometry_ = odometry;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.OdometryResponse.odometry)
}

// -------------------------------------------------------------------

// Position

// double latitude_deg = 1;
inline void Position::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double Position::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Position.latitude_deg)
  return latitude_deg_;
}
inline void Position::set_latitude_deg(double value) {
  
  latitude_deg_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Position.latitude_deg)
}

// double longitude_deg = 2;
inline void Position::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double Position::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Position.longitude_deg)
  return longitude_deg_;
}
inline void Position::set_longitude_deg(double value) {
  
  longitude_deg_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Position.longitude_deg)
}

// float absolute_altitude_m = 3;
inline void Position::clear_absolute_altitude_m() {
  absolute_altitude_m_ = 0;
}
inline float Position::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Position.absolute_altitude_m)
  return absolute_altitude_m_;
}
inline void Position::set_absolute_altitude_m(float value) {
  
  absolute_altitude_m_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Position.absolute_altitude_m)
}

// float relative_altitude_m = 4;
inline void Position::clear_relative_altitude_m() {
  relative_altitude_m_ = 0;
}
inline float Position::relative_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Position.relative_altitude_m)
  return relative_altitude_m_;
}
inline void Position::set_relative_altitude_m(float value) {
  
  relative_altitude_m_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Position.relative_altitude_m)
}

// -------------------------------------------------------------------

// Quaternion

// float w = 1;
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Quaternion.w)
  return w_;
}
inline void Quaternion::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Quaternion.w)
}

// float x = 2;
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Quaternion.x)
  return x_;
}
inline void Quaternion::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Quaternion.x)
}

// float y = 3;
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Quaternion.y)
  return y_;
}
inline void Quaternion::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Quaternion.y)
}

// float z = 4;
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Quaternion.z)
  return z_;
}
inline void Quaternion::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Quaternion.z)
}

// -------------------------------------------------------------------

// EulerAngle

// float roll_deg = 1;
inline void EulerAngle::clear_roll_deg() {
  roll_deg_ = 0;
}
inline float EulerAngle::roll_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.EulerAngle.roll_deg)
  return roll_deg_;
}
inline void EulerAngle::set_roll_deg(float value) {
  
  roll_deg_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.EulerAngle.roll_deg)
}

// float pitch_deg = 2;
inline void EulerAngle::clear_pitch_deg() {
  pitch_deg_ = 0;
}
inline float EulerAngle::pitch_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.EulerAngle.pitch_deg)
  return pitch_deg_;
}
inline void EulerAngle::set_pitch_deg(float value) {
  
  pitch_deg_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.EulerAngle.pitch_deg)
}

// float yaw_deg = 3;
inline void EulerAngle::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline float EulerAngle::yaw_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.EulerAngle.yaw_deg)
  return yaw_deg_;
}
inline void EulerAngle::set_yaw_deg(float value) {
  
  yaw_deg_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.EulerAngle.yaw_deg)
}

// -------------------------------------------------------------------

// AngularVelocityBody

// float roll_rad_s = 1;
inline void AngularVelocityBody::clear_roll_rad_s() {
  roll_rad_s_ = 0;
}
inline float AngularVelocityBody::roll_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AngularVelocityBody.roll_rad_s)
  return roll_rad_s_;
}
inline void AngularVelocityBody::set_roll_rad_s(float value) {
  
  roll_rad_s_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.AngularVelocityBody.roll_rad_s)
}

// float pitch_rad_s = 2;
inline void AngularVelocityBody::clear_pitch_rad_s() {
  pitch_rad_s_ = 0;
}
inline float AngularVelocityBody::pitch_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AngularVelocityBody.pitch_rad_s)
  return pitch_rad_s_;
}
inline void AngularVelocityBody::set_pitch_rad_s(float value) {
  
  pitch_rad_s_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.AngularVelocityBody.pitch_rad_s)
}

// float yaw_rad_s = 3;
inline void AngularVelocityBody::clear_yaw_rad_s() {
  yaw_rad_s_ = 0;
}
inline float AngularVelocityBody::yaw_rad_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.AngularVelocityBody.yaw_rad_s)
  return yaw_rad_s_;
}
inline void AngularVelocityBody::set_yaw_rad_s(float value) {
  
  yaw_rad_s_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.AngularVelocityBody.yaw_rad_s)
}

// -------------------------------------------------------------------

// SpeedNed

// float velocity_north_m_s = 1;
inline void SpeedNed::clear_velocity_north_m_s() {
  velocity_north_m_s_ = 0;
}
inline float SpeedNed::velocity_north_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SpeedNed.velocity_north_m_s)
  return velocity_north_m_s_;
}
inline void SpeedNed::set_velocity_north_m_s(float value) {
  
  velocity_north_m_s_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SpeedNed.velocity_north_m_s)
}

// float velocity_east_m_s = 2;
inline void SpeedNed::clear_velocity_east_m_s() {
  velocity_east_m_s_ = 0;
}
inline float SpeedNed::velocity_east_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SpeedNed.velocity_east_m_s)
  return velocity_east_m_s_;
}
inline void SpeedNed::set_velocity_east_m_s(float value) {
  
  velocity_east_m_s_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SpeedNed.velocity_east_m_s)
}

// float velocity_down_m_s = 3;
inline void SpeedNed::clear_velocity_down_m_s() {
  velocity_down_m_s_ = 0;
}
inline float SpeedNed::velocity_down_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SpeedNed.velocity_down_m_s)
  return velocity_down_m_s_;
}
inline void SpeedNed::set_velocity_down_m_s(float value) {
  
  velocity_down_m_s_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SpeedNed.velocity_down_m_s)
}

// -------------------------------------------------------------------

// GpsInfo

// int32 num_satellites = 1;
inline void GpsInfo::clear_num_satellites() {
  num_satellites_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GpsInfo::num_satellites() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.GpsInfo.num_satellites)
  return num_satellites_;
}
inline void GpsInfo::set_num_satellites(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_satellites_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.GpsInfo.num_satellites)
}

// .mavsdk.rpc.telemetry.FixType fix_type = 2;
inline void GpsInfo::clear_fix_type() {
  fix_type_ = 0;
}
inline ::mavsdk::rpc::telemetry::FixType GpsInfo::fix_type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.GpsInfo.fix_type)
  return static_cast< ::mavsdk::rpc::telemetry::FixType >(fix_type_);
}
inline void GpsInfo::set_fix_type(::mavsdk::rpc::telemetry::FixType value) {
  
  fix_type_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.GpsInfo.fix_type)
}

// -------------------------------------------------------------------

// Battery

// float voltage_v = 1;
inline void Battery::clear_voltage_v() {
  voltage_v_ = 0;
}
inline float Battery::voltage_v() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Battery.voltage_v)
  return voltage_v_;
}
inline void Battery::set_voltage_v(float value) {
  
  voltage_v_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Battery.voltage_v)
}

// float remaining_percent = 2;
inline void Battery::clear_remaining_percent() {
  remaining_percent_ = 0;
}
inline float Battery::remaining_percent() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Battery.remaining_percent)
  return remaining_percent_;
}
inline void Battery::set_remaining_percent(float value) {
  
  remaining_percent_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Battery.remaining_percent)
}

// -------------------------------------------------------------------

// Health

// bool is_gyrometer_calibration_ok = 1;
inline void Health::clear_is_gyrometer_calibration_ok() {
  is_gyrometer_calibration_ok_ = false;
}
inline bool Health::is_gyrometer_calibration_ok() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Health.is_gyrometer_calibration_ok)
  return is_gyrometer_calibration_ok_;
}
inline void Health::set_is_gyrometer_calibration_ok(bool value) {
  
  is_gyrometer_calibration_ok_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Health.is_gyrometer_calibration_ok)
}

// bool is_accelerometer_calibration_ok = 2;
inline void Health::clear_is_accelerometer_calibration_ok() {
  is_accelerometer_calibration_ok_ = false;
}
inline bool Health::is_accelerometer_calibration_ok() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Health.is_accelerometer_calibration_ok)
  return is_accelerometer_calibration_ok_;
}
inline void Health::set_is_accelerometer_calibration_ok(bool value) {
  
  is_accelerometer_calibration_ok_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Health.is_accelerometer_calibration_ok)
}

// bool is_magnetometer_calibration_ok = 3;
inline void Health::clear_is_magnetometer_calibration_ok() {
  is_magnetometer_calibration_ok_ = false;
}
inline bool Health::is_magnetometer_calibration_ok() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Health.is_magnetometer_calibration_ok)
  return is_magnetometer_calibration_ok_;
}
inline void Health::set_is_magnetometer_calibration_ok(bool value) {
  
  is_magnetometer_calibration_ok_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Health.is_magnetometer_calibration_ok)
}

// bool is_level_calibration_ok = 4;
inline void Health::clear_is_level_calibration_ok() {
  is_level_calibration_ok_ = false;
}
inline bool Health::is_level_calibration_ok() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Health.is_level_calibration_ok)
  return is_level_calibration_ok_;
}
inline void Health::set_is_level_calibration_ok(bool value) {
  
  is_level_calibration_ok_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Health.is_level_calibration_ok)
}

// bool is_local_position_ok = 5;
inline void Health::clear_is_local_position_ok() {
  is_local_position_ok_ = false;
}
inline bool Health::is_local_position_ok() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Health.is_local_position_ok)
  return is_local_position_ok_;
}
inline void Health::set_is_local_position_ok(bool value) {
  
  is_local_position_ok_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Health.is_local_position_ok)
}

// bool is_global_position_ok = 6;
inline void Health::clear_is_global_position_ok() {
  is_global_position_ok_ = false;
}
inline bool Health::is_global_position_ok() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Health.is_global_position_ok)
  return is_global_position_ok_;
}
inline void Health::set_is_global_position_ok(bool value) {
  
  is_global_position_ok_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Health.is_global_position_ok)
}

// bool is_home_position_ok = 7;
inline void Health::clear_is_home_position_ok() {
  is_home_position_ok_ = false;
}
inline bool Health::is_home_position_ok() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Health.is_home_position_ok)
  return is_home_position_ok_;
}
inline void Health::set_is_home_position_ok(bool value) {
  
  is_home_position_ok_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Health.is_home_position_ok)
}

// -------------------------------------------------------------------

// RcStatus

// bool was_available_once = 1;
inline void RcStatus::clear_was_available_once() {
  was_available_once_ = false;
}
inline bool RcStatus::was_available_once() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RcStatus.was_available_once)
  return was_available_once_;
}
inline void RcStatus::set_was_available_once(bool value) {
  
  was_available_once_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RcStatus.was_available_once)
}

// bool is_available = 2;
inline void RcStatus::clear_is_available() {
  is_available_ = false;
}
inline bool RcStatus::is_available() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RcStatus.is_available)
  return is_available_;
}
inline void RcStatus::set_is_available(bool value) {
  
  is_available_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RcStatus.is_available)
}

// float signal_strength_percent = 3;
inline void RcStatus::clear_signal_strength_percent() {
  signal_strength_percent_ = 0;
}
inline float RcStatus::signal_strength_percent() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.RcStatus.signal_strength_percent)
  return signal_strength_percent_;
}
inline void RcStatus::set_signal_strength_percent(float value) {
  
  signal_strength_percent_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.RcStatus.signal_strength_percent)
}

// -------------------------------------------------------------------

// StatusText

// .mavsdk.rpc.telemetry.StatusText.StatusType type = 1;
inline void StatusText::clear_type() {
  type_ = 0;
}
inline ::mavsdk::rpc::telemetry::StatusText_StatusType StatusText::type() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.StatusText.type)
  return static_cast< ::mavsdk::rpc::telemetry::StatusText_StatusType >(type_);
}
inline void StatusText::set_type(::mavsdk::rpc::telemetry::StatusText_StatusType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.StatusText.type)
}

// string text = 2;
inline void StatusText::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StatusText::text() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.StatusText.text)
  return _internal_text();
}
inline void StatusText::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.StatusText.text)
}
inline std::string* StatusText::mutable_text() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.StatusText.text)
  return _internal_mutable_text();
}
inline const std::string& StatusText::_internal_text() const {
  return text_.GetNoArena();
}
inline void StatusText::_internal_set_text(const std::string& value) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void StatusText::set_text(std::string&& value) {
  
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.telemetry.StatusText.text)
}
inline void StatusText::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.telemetry.StatusText.text)
}
inline void StatusText::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.telemetry.StatusText.text)
}
inline std::string* StatusText::_internal_mutable_text() {
  
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StatusText::release_text() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.StatusText.text)
  
  return text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StatusText::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.StatusText.text)
}

// -------------------------------------------------------------------

// ActuatorControlTarget

// int32 group = 1;
inline void ActuatorControlTarget::clear_group() {
  group_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ActuatorControlTarget::group() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ActuatorControlTarget.group)
  return group_;
}
inline void ActuatorControlTarget::set_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  group_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.ActuatorControlTarget.group)
}

// repeated float controls = 2;
inline int ActuatorControlTarget::controls_size() const {
  return controls_.size();
}
inline void ActuatorControlTarget::clear_controls() {
  controls_.Clear();
}
inline float ActuatorControlTarget::controls(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ActuatorControlTarget.controls)
  return controls_.Get(index);
}
inline void ActuatorControlTarget::set_controls(int index, float value) {
  controls_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.ActuatorControlTarget.controls)
}
inline void ActuatorControlTarget::add_controls(float value) {
  controls_.Add(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.telemetry.ActuatorControlTarget.controls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ActuatorControlTarget::controls() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.telemetry.ActuatorControlTarget.controls)
  return controls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ActuatorControlTarget::mutable_controls() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.telemetry.ActuatorControlTarget.controls)
  return &controls_;
}

// -------------------------------------------------------------------

// ActuatorOutputStatus

// uint32 active = 1;
inline void ActuatorOutputStatus::clear_active() {
  active_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActuatorOutputStatus::active() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ActuatorOutputStatus.active)
  return active_;
}
inline void ActuatorOutputStatus::set_active(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.ActuatorOutputStatus.active)
}

// repeated float actuator = 2;
inline int ActuatorOutputStatus::actuator_size() const {
  return actuator_.size();
}
inline void ActuatorOutputStatus::clear_actuator() {
  actuator_.Clear();
}
inline float ActuatorOutputStatus::actuator(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.ActuatorOutputStatus.actuator)
  return actuator_.Get(index);
}
inline void ActuatorOutputStatus::set_actuator(int index, float value) {
  actuator_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.ActuatorOutputStatus.actuator)
}
inline void ActuatorOutputStatus::add_actuator(float value) {
  actuator_.Add(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.telemetry.ActuatorOutputStatus.actuator)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ActuatorOutputStatus::actuator() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.telemetry.ActuatorOutputStatus.actuator)
  return actuator_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ActuatorOutputStatus::mutable_actuator() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.telemetry.ActuatorOutputStatus.actuator)
  return &actuator_;
}

// -------------------------------------------------------------------

// Odometry

// uint64 time_usec = 1;
inline void Odometry::clear_time_usec() {
  time_usec_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Odometry::time_usec() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.time_usec)
  return time_usec_;
}
inline void Odometry::set_time_usec(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_usec_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Odometry.time_usec)
}

// .mavsdk.rpc.telemetry.Odometry.MavFrame frame_id = 2;
inline void Odometry::clear_frame_id() {
  frame_id_ = 0;
}
inline ::mavsdk::rpc::telemetry::Odometry_MavFrame Odometry::frame_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.frame_id)
  return static_cast< ::mavsdk::rpc::telemetry::Odometry_MavFrame >(frame_id_);
}
inline void Odometry::set_frame_id(::mavsdk::rpc::telemetry::Odometry_MavFrame value) {
  
  frame_id_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Odometry.frame_id)
}

// .mavsdk.rpc.telemetry.Odometry.MavFrame child_frame_id = 3;
inline void Odometry::clear_child_frame_id() {
  child_frame_id_ = 0;
}
inline ::mavsdk::rpc::telemetry::Odometry_MavFrame Odometry::child_frame_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.child_frame_id)
  return static_cast< ::mavsdk::rpc::telemetry::Odometry_MavFrame >(child_frame_id_);
}
inline void Odometry::set_child_frame_id(::mavsdk::rpc::telemetry::Odometry_MavFrame value) {
  
  child_frame_id_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Odometry.child_frame_id)
}

// .mavsdk.rpc.telemetry.PositionBody position_body = 4;
inline bool Odometry::has_position_body() const {
  return this != internal_default_instance() && position_body_ != nullptr;
}
inline void Odometry::clear_position_body() {
  if (GetArenaNoVirtual() == nullptr && position_body_ != nullptr) {
    delete position_body_;
  }
  position_body_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::PositionBody& Odometry::position_body() const {
  const ::mavsdk::rpc::telemetry::PositionBody* p = position_body_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.position_body)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::PositionBody*>(
      &::mavsdk::rpc::telemetry::_PositionBody_default_instance_);
}
inline ::mavsdk::rpc::telemetry::PositionBody* Odometry::release_position_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.Odometry.position_body)
  
  ::mavsdk::rpc::telemetry::PositionBody* temp = position_body_;
  position_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::PositionBody* Odometry::mutable_position_body() {
  
  if (position_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::PositionBody>(GetArenaNoVirtual());
    position_body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.Odometry.position_body)
  return position_body_;
}
inline void Odometry::set_allocated_position_body(::mavsdk::rpc::telemetry::PositionBody* position_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_body_;
  }
  if (position_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_body, submessage_arena);
    }
    
  } else {
    
  }
  position_body_ = position_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.Odometry.position_body)
}

// .mavsdk.rpc.telemetry.Quaternion q = 5;
inline bool Odometry::has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline void Odometry::clear_q() {
  if (GetArenaNoVirtual() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Quaternion& Odometry::q() const {
  const ::mavsdk::rpc::telemetry::Quaternion* p = q_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.q)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::Quaternion*>(
      &::mavsdk::rpc::telemetry::_Quaternion_default_instance_);
}
inline ::mavsdk::rpc::telemetry::Quaternion* Odometry::release_q() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.Odometry.q)
  
  ::mavsdk::rpc::telemetry::Quaternion* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Quaternion* Odometry::mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Quaternion>(GetArenaNoVirtual());
    q_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.Odometry.q)
  return q_;
}
inline void Odometry::set_allocated_q(::mavsdk::rpc::telemetry::Quaternion* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.Odometry.q)
}

// .mavsdk.rpc.telemetry.SpeedBody speed_body = 6;
inline bool Odometry::has_speed_body() const {
  return this != internal_default_instance() && speed_body_ != nullptr;
}
inline void Odometry::clear_speed_body() {
  if (GetArenaNoVirtual() == nullptr && speed_body_ != nullptr) {
    delete speed_body_;
  }
  speed_body_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::SpeedBody& Odometry::speed_body() const {
  const ::mavsdk::rpc::telemetry::SpeedBody* p = speed_body_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.speed_body)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::SpeedBody*>(
      &::mavsdk::rpc::telemetry::_SpeedBody_default_instance_);
}
inline ::mavsdk::rpc::telemetry::SpeedBody* Odometry::release_speed_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.Odometry.speed_body)
  
  ::mavsdk::rpc::telemetry::SpeedBody* temp = speed_body_;
  speed_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::SpeedBody* Odometry::mutable_speed_body() {
  
  if (speed_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::SpeedBody>(GetArenaNoVirtual());
    speed_body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.Odometry.speed_body)
  return speed_body_;
}
inline void Odometry::set_allocated_speed_body(::mavsdk::rpc::telemetry::SpeedBody* speed_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete speed_body_;
  }
  if (speed_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      speed_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_body, submessage_arena);
    }
    
  } else {
    
  }
  speed_body_ = speed_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.Odometry.speed_body)
}

// .mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;
inline bool Odometry::has_angular_velocity_body() const {
  return this != internal_default_instance() && angular_velocity_body_ != nullptr;
}
inline void Odometry::clear_angular_velocity_body() {
  if (GetArenaNoVirtual() == nullptr && angular_velocity_body_ != nullptr) {
    delete angular_velocity_body_;
  }
  angular_velocity_body_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::AngularVelocityBody& Odometry::angular_velocity_body() const {
  const ::mavsdk::rpc::telemetry::AngularVelocityBody* p = angular_velocity_body_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.angular_velocity_body)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::AngularVelocityBody*>(
      &::mavsdk::rpc::telemetry::_AngularVelocityBody_default_instance_);
}
inline ::mavsdk::rpc::telemetry::AngularVelocityBody* Odometry::release_angular_velocity_body() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.Odometry.angular_velocity_body)
  
  ::mavsdk::rpc::telemetry::AngularVelocityBody* temp = angular_velocity_body_;
  angular_velocity_body_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::AngularVelocityBody* Odometry::mutable_angular_velocity_body() {
  
  if (angular_velocity_body_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::AngularVelocityBody>(GetArenaNoVirtual());
    angular_velocity_body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.Odometry.angular_velocity_body)
  return angular_velocity_body_;
}
inline void Odometry::set_allocated_angular_velocity_body(::mavsdk::rpc::telemetry::AngularVelocityBody* angular_velocity_body) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete angular_velocity_body_;
  }
  if (angular_velocity_body) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular_velocity_body = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity_body, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_body_ = angular_velocity_body;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.Odometry.angular_velocity_body)
}

// .mavsdk.rpc.telemetry.Covariance pose_covariance = 8;
inline bool Odometry::has_pose_covariance() const {
  return this != internal_default_instance() && pose_covariance_ != nullptr;
}
inline void Odometry::clear_pose_covariance() {
  if (GetArenaNoVirtual() == nullptr && pose_covariance_ != nullptr) {
    delete pose_covariance_;
  }
  pose_covariance_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Covariance& Odometry::pose_covariance() const {
  const ::mavsdk::rpc::telemetry::Covariance* p = pose_covariance_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.pose_covariance)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::Covariance*>(
      &::mavsdk::rpc::telemetry::_Covariance_default_instance_);
}
inline ::mavsdk::rpc::telemetry::Covariance* Odometry::release_pose_covariance() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.Odometry.pose_covariance)
  
  ::mavsdk::rpc::telemetry::Covariance* temp = pose_covariance_;
  pose_covariance_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Covariance* Odometry::mutable_pose_covariance() {
  
  if (pose_covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Covariance>(GetArenaNoVirtual());
    pose_covariance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.Odometry.pose_covariance)
  return pose_covariance_;
}
inline void Odometry::set_allocated_pose_covariance(::mavsdk::rpc::telemetry::Covariance* pose_covariance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pose_covariance_;
  }
  if (pose_covariance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose_covariance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_covariance, submessage_arena);
    }
    
  } else {
    
  }
  pose_covariance_ = pose_covariance;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.Odometry.pose_covariance)
}

// .mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;
inline bool Odometry::has_velocity_covariance() const {
  return this != internal_default_instance() && velocity_covariance_ != nullptr;
}
inline void Odometry::clear_velocity_covariance() {
  if (GetArenaNoVirtual() == nullptr && velocity_covariance_ != nullptr) {
    delete velocity_covariance_;
  }
  velocity_covariance_ = nullptr;
}
inline const ::mavsdk::rpc::telemetry::Covariance& Odometry::velocity_covariance() const {
  const ::mavsdk::rpc::telemetry::Covariance* p = velocity_covariance_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Odometry.velocity_covariance)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::telemetry::Covariance*>(
      &::mavsdk::rpc::telemetry::_Covariance_default_instance_);
}
inline ::mavsdk::rpc::telemetry::Covariance* Odometry::release_velocity_covariance() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.telemetry.Odometry.velocity_covariance)
  
  ::mavsdk::rpc::telemetry::Covariance* temp = velocity_covariance_;
  velocity_covariance_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::telemetry::Covariance* Odometry::mutable_velocity_covariance() {
  
  if (velocity_covariance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::telemetry::Covariance>(GetArenaNoVirtual());
    velocity_covariance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.telemetry.Odometry.velocity_covariance)
  return velocity_covariance_;
}
inline void Odometry::set_allocated_velocity_covariance(::mavsdk::rpc::telemetry::Covariance* velocity_covariance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete velocity_covariance_;
  }
  if (velocity_covariance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity_covariance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_covariance, submessage_arena);
    }
    
  } else {
    
  }
  velocity_covariance_ = velocity_covariance;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.telemetry.Odometry.velocity_covariance)
}

// -------------------------------------------------------------------

// Covariance

// repeated float covariance_matrix = 1;
inline int Covariance::covariance_matrix_size() const {
  return covariance_matrix_.size();
}
inline void Covariance::clear_covariance_matrix() {
  covariance_matrix_.Clear();
}
inline float Covariance::covariance_matrix(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.Covariance.covariance_matrix)
  return covariance_matrix_.Get(index);
}
inline void Covariance::set_covariance_matrix(int index, float value) {
  covariance_matrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.Covariance.covariance_matrix)
}
inline void Covariance::add_covariance_matrix(float value) {
  covariance_matrix_.Add(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.telemetry.Covariance.covariance_matrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Covariance::covariance_matrix() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.telemetry.Covariance.covariance_matrix)
  return covariance_matrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Covariance::mutable_covariance_matrix() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.telemetry.Covariance.covariance_matrix)
  return &covariance_matrix_;
}

// -------------------------------------------------------------------

// SpeedBody

// float velocity_x_m_s = 1;
inline void SpeedBody::clear_velocity_x_m_s() {
  velocity_x_m_s_ = 0;
}
inline float SpeedBody::velocity_x_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SpeedBody.velocity_x_m_s)
  return velocity_x_m_s_;
}
inline void SpeedBody::set_velocity_x_m_s(float value) {
  
  velocity_x_m_s_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SpeedBody.velocity_x_m_s)
}

// float velocity_y_m_s = 2;
inline void SpeedBody::clear_velocity_y_m_s() {
  velocity_y_m_s_ = 0;
}
inline float SpeedBody::velocity_y_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SpeedBody.velocity_y_m_s)
  return velocity_y_m_s_;
}
inline void SpeedBody::set_velocity_y_m_s(float value) {
  
  velocity_y_m_s_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SpeedBody.velocity_y_m_s)
}

// float velocity_z_m_s = 3;
inline void SpeedBody::clear_velocity_z_m_s() {
  velocity_z_m_s_ = 0;
}
inline float SpeedBody::velocity_z_m_s() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.SpeedBody.velocity_z_m_s)
  return velocity_z_m_s_;
}
inline void SpeedBody::set_velocity_z_m_s(float value) {
  
  velocity_z_m_s_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.SpeedBody.velocity_z_m_s)
}

// -------------------------------------------------------------------

// PositionBody

// float x_m = 1;
inline void PositionBody::clear_x_m() {
  x_m_ = 0;
}
inline float PositionBody::x_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.PositionBody.x_m)
  return x_m_;
}
inline void PositionBody::set_x_m(float value) {
  
  x_m_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.PositionBody.x_m)
}

// float y_m = 2;
inline void PositionBody::clear_y_m() {
  y_m_ = 0;
}
inline float PositionBody::y_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.PositionBody.y_m)
  return y_m_;
}
inline void PositionBody::set_y_m(float value) {
  
  y_m_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.PositionBody.y_m)
}

// float z_m = 3;
inline void PositionBody::clear_z_m() {
  z_m_ = 0;
}
inline float PositionBody::z_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.telemetry.PositionBody.z_m)
  return z_m_;
}
inline void PositionBody::set_z_m(float value) {
  
  z_m_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.telemetry.PositionBody.z_m)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace telemetry
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::telemetry::StatusText_StatusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry::StatusText_StatusType>() {
  return ::mavsdk::rpc::telemetry::StatusText_StatusType_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::telemetry::Odometry_MavFrame> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry::Odometry_MavFrame>() {
  return ::mavsdk::rpc::telemetry::Odometry_MavFrame_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::telemetry::FixType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry::FixType>() {
  return ::mavsdk::rpc::telemetry::FixType_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::telemetry::FlightMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry::FlightMode>() {
  return ::mavsdk::rpc::telemetry::FlightMode_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::telemetry::LandedState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::telemetry::LandedState>() {
  return ::mavsdk::rpc::telemetry::LandedState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_telemetry_2ftelemetry_2eproto
